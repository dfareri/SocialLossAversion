
'
'
'	E:\Backup Data\SocialLossAversion\SLA_v1a_withpractice_Other_8_11_16A_ORDER2.ebs2
'	Generated on: 8/15/2018	10:58:10
'
'
'	This experiment has been generated with E-Prime version: 2.0.10.356
'
'	This file generated with E-Studio interface.
'	E-Prime Copyright Â© 1996-2015 Psychology Software Tools.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'
'
'
'

Option CStrings On
Dim ebContext as Context


'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------









































'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim Display As DisplayDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim Sound As SoundDevice
Dim ParallelPort As ParallelPortDevice
Dim SessionProc As Procedure
Dim SessionProc_nObject As Long
Dim SessionProc_bCanExit As Boolean
Dim SessionProc_theCollection As RteCollection
Dim SessionProc_theInputObject As RteRunnableInputObject

' List Attribute Constants
Const attrib_weight = ebUCase_W & ebLCase_e & ebLCase_i & ebLCase_g & ebLCase_h & ebLCase_t
Const attrib_nested = ebUCase_N & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d
Const attrib_procedure = ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebLCase_e & ebLCase_d & ebLCase_u & ebLCase_r & ebLCase_e
Const attrib_amount1 = ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1
Const attrib_amount2 = ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2
Const attrib_certain = ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n
Const attrib_gambleoutcome = ebUCase_G & ebLCase_a & ebLCase_m & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_O & ebLCase_u & ebLCase_t & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_e
Const attrib_gambleamount = ebUCase_G & ebLCase_a & ebLCase_m & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t
Const attrib_partnername = ebUCase_P & ebLCase_a & ebLCase_r & ebLCase_t & ebLCase_n & ebLCase_e & ebLCase_r & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e
Const attrib_ratingoutcome = ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_O & ebLCase_u & ebLCase_t & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_e
Const attrib_itilength = ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h

Dim List1 As List

Dim Instructions As Procedure
Dim Instructions_nObject As Long
Dim Instructions_bCanExit As Boolean
Dim Instructions_theCollection As RteCollection
Dim Instructions_theInputObject As RteRunnableInputObject

Dim Ratings As Procedure
Dim Ratings_nObject As Long
Dim Ratings_bCanExit As Boolean
Dim Ratings_theCollection As RteCollection
Dim Ratings_theInputObject As RteRunnableInputObject

Dim SelfTask As Procedure
Dim SelfTask_nObject As Long
Dim SelfTask_bCanExit As Boolean
Dim SelfTask_theCollection As RteCollection
Dim SelfTask_theInputObject As RteRunnableInputObject

Dim OtherTask As Procedure
Dim OtherTask_nObject As Long
Dim OtherTask_bCanExit As Boolean
Dim OtherTask_theCollection As RteCollection
Dim OtherTask_theInputObject As RteRunnableInputObject

Dim BothTask As Procedure
Dim BothTask_nObject As Long
Dim BothTask_bCanExit As Boolean
Dim BothTask_theCollection As RteCollection
Dim BothTask_theInputObject As RteRunnableInputObject

Dim ITI As TextDisplay

Dim Options As Slide
Dim Options_State As SlideState
Dim Options_SlideText As SlideText

Dim ISI As TextDisplay

Dim Response As Slide
Dim ResponseEchoClients As EchoClientCollection
Dim Response_State As SlideState
Dim Response_SlideText As SlideText

Dim BothFB As FeedbackDisplay
Dim BothFB_State As SlideState
Dim BothFB_SlideText As SlideText
Dim BothFB_Child As RteRunnableInputObject
Dim BothFB_ChildIterator As Long
Dim BothFB_MaskIterator As Long
Dim BothFB_Mask As InputMask

Dim LASelfMixed As Procedure
Dim LASelfMixed_nObject As Long
Dim LASelfMixed_bCanExit As Boolean
Dim LASelfMixed_theCollection As RteCollection
Dim LASelfMixed_theInputObject As RteRunnableInputObject

Dim LASelfGain As Procedure
Dim LASelfGain_nObject As Long
Dim LASelfGain_bCanExit As Boolean
Dim LASelfGain_theCollection As RteCollection
Dim LASelfGain_theInputObject As RteRunnableInputObject

Dim List3 As List

Dim Self1 As Procedure
Dim Self1_nObject As Long
Dim Self1_bCanExit As Boolean
Dim Self1_theCollection As RteCollection
Dim Self1_theInputObject As RteRunnableInputObject

Dim Self2 As Procedure
Dim Self2_nObject As Long
Dim Self2_bCanExit As Boolean
Dim Self2_theCollection As RteCollection
Dim Self2_theInputObject As RteRunnableInputObject

Dim Self3 As Procedure
Dim Self3_nObject As Long
Dim Self3_bCanExit As Boolean
Dim Self3_theCollection As RteCollection
Dim Self3_theInputObject As RteRunnableInputObject

Dim List4 As List

Dim List5 As List

Dim List6 As List

Dim Instructions1 As TextDisplay
Dim Instructions1EchoClients As EchoClientCollection

Dim Instruction2 As TextDisplay
Dim Instruction2EchoClients As EchoClientCollection

Dim List2 As List

Dim List7 As List

Dim List8 As List

Dim Other1 As Procedure
Dim Other1_nObject As Long
Dim Other1_bCanExit As Boolean
Dim Other1_theCollection As RteCollection
Dim Other1_theInputObject As RteRunnableInputObject

Dim Other2 As Procedure
Dim Other2_nObject As Long
Dim Other2_bCanExit As Boolean
Dim Other2_theCollection As RteCollection
Dim Other2_theInputObject As RteRunnableInputObject

Dim Other3 As Procedure
Dim Other3_nObject As Long
Dim Other3_bCanExit As Boolean
Dim Other3_theCollection As RteCollection
Dim Other3_theInputObject As RteRunnableInputObject

Dim List9 As List

Dim List10 As List

Dim Both1 As Procedure
Dim Both1_nObject As Long
Dim Both1_bCanExit As Boolean
Dim Both1_theCollection As RteCollection
Dim Both1_theInputObject As RteRunnableInputObject

Dim Both2 As Procedure
Dim Both2_nObject As Long
Dim Both2_bCanExit As Boolean
Dim Both2_theCollection As RteCollection
Dim Both2_theInputObject As RteRunnableInputObject

Dim Both3 As Procedure
Dim Both3_nObject As Long
Dim Both3_bCanExit As Boolean
Dim Both3_theCollection As RteCollection
Dim Both3_theInputObject As RteRunnableInputObject

Dim List11 As List

Dim List12 As List

Dim List13 As List

Dim LAOtherMixed As Procedure
Dim LAOtherMixed_nObject As Long
Dim LAOtherMixed_bCanExit As Boolean
Dim LAOtherMixed_theCollection As RteCollection
Dim LAOtherMixed_theInputObject As RteRunnableInputObject

Dim LAOtherGain As Procedure
Dim LAOtherGain_nObject As Long
Dim LAOtherGain_bCanExit As Boolean
Dim LAOtherGain_theCollection As RteCollection
Dim LAOtherGain_theInputObject As RteRunnableInputObject

Dim LABothMixed As Procedure
Dim LABothMixed_nObject As Long
Dim LABothMixed_bCanExit As Boolean
Dim LABothMixed_theCollection As RteCollection
Dim LABothMixed_theInputObject As RteRunnableInputObject

Dim LABothGain As Procedure
Dim LABothGain_nObject As Long
Dim LABothGain_bCanExit As Boolean
Dim LABothGain_theCollection As RteCollection
Dim LABothGain_theInputObject As RteRunnableInputObject

Dim InstructionOptions1 As Slide
Dim InstructionOptions1EchoClients As EchoClientCollection
Dim InstructionOptions1_State As SlideState
Dim InstructionOptions1_SlideText As SlideText

Dim InstructionResponse2 As Slide
Dim InstructionResponse2EchoClients As EchoClientCollection
Dim InstructionResponse2_State As SlideState
Dim InstructionResponse2_SlideText As SlideText

Dim Instruction5 As TextDisplay
Dim Instruction5EchoClients As EchoClientCollection

Dim Instruction6 As TextDisplay
Dim Instruction6EchoClients As EchoClientCollection

Dim Instruction7 As TextDisplay
Dim Instruction7EchoClients As EchoClientCollection

Dim Instruction8 As TextDisplay
Dim Instruction8EchoClients As EchoClientCollection

Dim Instruction9 As TextDisplay
Dim Instruction9EchoClients As EchoClientCollection

Dim practiceoptions As Slide
Dim practiceoptions_State As SlideState
Dim practiceoptions_SlideText As SlideText

Dim practiceresponse As Slide
Dim practiceresponseEchoClients As EchoClientCollection
Dim practiceresponse_State As SlideState
Dim practiceresponse_SlideText As SlideText

Dim practiceresponse3 As Slide
Dim practiceresponse3EchoClients As EchoClientCollection
Dim practiceresponse3_State As SlideState
Dim practiceresponse3_SlideText As SlideText

Dim practiceoptions3 As Slide
Dim practiceoptions3_State As SlideState
Dim practiceoptions3_SlideText As SlideText

Dim PracticeList As List

Dim PracticeTrials As Procedure
Dim PracticeTrials_nObject As Long
Dim PracticeTrials_bCanExit As Boolean
Dim PracticeTrials_theCollection As RteCollection
Dim PracticeTrials_theInputObject As RteRunnableInputObject

Dim List14 As List

Dim PracticeMixed As Procedure
Dim PracticeMixed_nObject As Long
Dim PracticeMixed_bCanExit As Boolean
Dim PracticeMixed_theCollection As RteCollection
Dim PracticeMixed_theInputObject As RteRunnableInputObject

Dim PracticeGain As Procedure
Dim PracticeGain_nObject As Long
Dim PracticeGain_bCanExit As Boolean
Dim PracticeGain_theCollection As RteCollection
Dim PracticeGain_theInputObject As RteRunnableInputObject

Dim FeedbackDisplay2 As FeedbackDisplay
Dim FeedbackDisplay2_State As SlideState
Dim FeedbackDisplay2_SlideText As SlideText
Dim FeedbackDisplay2_Child As RteRunnableInputObject
Dim FeedbackDisplay2_ChildIterator As Long
Dim FeedbackDisplay2_MaskIterator As Long
Dim FeedbackDisplay2_Mask As InputMask

Dim FeedbackDisplay4 As FeedbackDisplay
Dim FeedbackDisplay4_State As SlideState
Dim FeedbackDisplay4_SlideText As SlideText
Dim FeedbackDisplay4_Child As RteRunnableInputObject
Dim FeedbackDisplay4_ChildIterator As Long
Dim FeedbackDisplay4_MaskIterator As Long
Dim FeedbackDisplay4_Mask As InputMask

Dim SelfSpaceBar1 As TextDisplay
Dim SelfSpaceBar1EchoClients As EchoClientCollection

Dim SelfSpaceBar2 As TextDisplay
Dim SelfSpaceBar2EchoClients As EchoClientCollection

Dim SelfSpaceBar3 As TextDisplay
Dim SelfSpaceBar3EchoClients As EchoClientCollection

Dim OtherSpaceBar1 As TextDisplay
Dim OtherSpaceBar1EchoClients As EchoClientCollection

Dim OtherSpaceBar2 As TextDisplay
Dim OtherSpaceBar2EchoClients As EchoClientCollection

Dim BothSpaceBar1 As TextDisplay
Dim BothSpaceBar1EchoClients As EchoClientCollection

Dim OtherSpaceBar3 As TextDisplay
Dim OtherSpaceBar3EchoClients As EchoClientCollection

Dim BothSpaceBar2 As TextDisplay
Dim BothSpaceBar2EchoClients As EchoClientCollection

Dim BothSpaceBar3 As TextDisplay
Dim BothSpaceBar3EchoClients As EchoClientCollection

Dim OtherBlockInstructions As Slide
Dim OtherBlockInstructionsEchoClients As EchoClientCollection
Dim OtherBlockInstructions_State As SlideState
Dim OtherBlockInstructions_SlideText As SlideText

Dim BothBlockInstructions As Slide
Dim BothBlockInstructionsEchoClients As EchoClientCollection
Dim BothBlockInstructions_State As SlideState
Dim BothBlockInstructions_SlideText As SlideText

Dim OtherFB As FeedbackDisplay
Dim OtherFB_State As SlideState
Dim OtherFB_SlideText As SlideText
Dim OtherFB_Child As RteRunnableInputObject
Dim OtherFB_ChildIterator As Long
Dim OtherFB_MaskIterator As Long
Dim OtherFB_Mask As InputMask

Dim SelfFB As FeedbackDisplay
Dim SelfFB_State As SlideState
Dim SelfFB_SlideText As SlideText
Dim SelfFB_Child As RteRunnableInputObject
Dim SelfFB_ChildIterator As Long
Dim SelfFB_MaskIterator As Long
Dim SelfFB_Mask As InputMask

Dim thanksforplaying As TextDisplay
Dim thanksforplayingEchoClients As EchoClientCollection

Dim RatingsList As List

Dim selfratings As Procedure
Dim selfratings_nObject As Long
Dim selfratings_bCanExit As Boolean
Dim selfratings_theCollection As RteCollection
Dim selfratings_theInputObject As RteRunnableInputObject

Dim otherratings As Procedure
Dim otherratings_nObject As Long
Dim otherratings_bCanExit As Boolean
Dim otherratings_theCollection As RteCollection
Dim otherratings_theInputObject As RteRunnableInputObject

Dim sharedratings As Procedure
Dim sharedratings_nObject As Long
Dim sharedratings_bCanExit As Boolean
Dim sharedratings_theCollection As RteCollection
Dim sharedratings_theInputObject As RteRunnableInputObject

Dim SelfOutcomes As Slide
Dim SelfOutcomesEchoClients As EchoClientCollection
Dim SelfOutcomes_State As SlideState
Dim SelfOutcomes_SlideText As SlideText

Dim OtherOutcomes As Slide
Dim OtherOutcomesEchoClients As EchoClientCollection
Dim OtherOutcomes_State As SlideState
Dim OtherOutcomes_SlideText As SlideText

Dim SharedOutcomes As Slide
Dim SharedOutcomesEchoClients As EchoClientCollection
Dim SharedOutcomes_State As SlideState
Dim SharedOutcomes_SlideText As SlideText

Dim pleasenotify As TextDisplay
Dim pleasenotifyEchoClients As EchoClientCollection

Dim ITIList As List

Dim ITIPrac As TextDisplay



'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' User Script - BEGIN
'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
' User Script - END
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		List1.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'
	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'NOTE: This Procedure is the root procedure in the Experiment Object.
		'  No script generated here for Object.InputMasks.IsPending()

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Instructions_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Instructions1.ResetLoggingProperties
		Instruction2.ResetLoggingProperties
		InstructionOptions1.ResetLoggingProperties
		InstructionResponse2.ResetLoggingProperties
		Instruction5.ResetLoggingProperties
		Instruction7.ResetLoggingProperties
		Instruction8.ResetLoggingProperties
		Instruction9.ResetLoggingProperties







	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	Instructions1.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instructions1EchoClients.RemoveAll
		Instructions1.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instructions1.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instructions1.Run
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetDelay, Instructions1.OnsetDelay
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetTime, Instructions1.OnsetTime
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameDurationError, Instructions1.DurationError
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRTTime, Instructions1.RTTime
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameACC, Instructions1.ACC
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRT, Instructions1.RT
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRESP, Instructions1.RESP
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameCRESP, Instructions1.CRESP
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetToOnsetTime, Instructions1.OnsetToOnsetTime



	Instruction2.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instruction2EchoClients.RemoveAll
		Instruction2.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instruction2.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instruction2.Run
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetDelay, Instruction2.OnsetDelay
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetTime, Instruction2.OnsetTime
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameDurationError, Instruction2.DurationError
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRTTime, Instruction2.RTTime
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameACC, Instruction2.ACC
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRT, Instruction2.RT
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRESP, Instruction2.RESP
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameCRESP, Instruction2.CRESP
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetToOnsetTime, Instruction2.OnsetToOnsetTime



	InstructionOptions1.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		InstructionOptions1EchoClients.RemoveAll
		InstructionOptions1.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(InstructionOptions1.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	InstructionOptions1.Run



	InstructionResponse2.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		InstructionResponse2EchoClients.RemoveAll
		InstructionResponse2.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(InstructionResponse2.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	InstructionResponse2.Run



	Instruction5.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instruction5EchoClients.RemoveAll
		Instruction5.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instruction5.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instruction5.Run


	Instruction7.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instruction7EchoClients.RemoveAll
		Instruction7.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instruction7.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instruction7.Run


	Instruction8.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instruction8EchoClients.RemoveAll
		Instruction8.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instruction8.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instruction8.Run
		PracticeList.Run c


	Instruction9.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		Instruction9EchoClients.RemoveAll
		Instruction9.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(Instruction9.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Instruction9.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Instructions_theCollection.RemoveAll
	For Instructions_nObject = 1 To Instructions.ChildObjectCount
		Set Instructions_theInputObject = CRteRunnableInputObject(Rte.GetObject(Instructions.GetChildObjectName(Instructions_nObject)))
		If Not Instructions_theInputObject Is Nothing Then Instructions_theCollection.Add Instructions_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Instructions_bCanExit = True
		For Instructions_nObject = 1 To Instructions_theCollection.Count
			Set Instructions_theInputObject = CRteRunnableInputObject(Instructions_theCollection(Instructions_nObject))
			If Not Instructions_theInputObject Is Nothing Then
				If Instructions_theInputObject.InputMasks.IsPending() Then
					Instructions_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Instructions_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Instructions_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Instructions1.EndOfProcedure

	Instruction2.EndOfProcedure

	InstructionOptions1.EndOfProcedure

	InstructionResponse2.EndOfProcedure

	Instruction5.EndOfProcedure

	Instruction7.EndOfProcedure

	Instruction8.EndOfProcedure

	Instruction9.EndOfProcedure

	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetDelay, Instructions1.OnsetDelay
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetTime, Instructions1.OnsetTime
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameDurationError, Instructions1.DurationError
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRTTime, Instructions1.RTTime
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameACC, Instructions1.ACC
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRT, Instructions1.RT
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameRESP, Instructions1.RESP
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameCRESP, Instructions1.CRESP
	c.SetAttrib Instructions1.Name & ebDot & ebLogNameOnsetToOnsetTime, Instructions1.OnsetToOnsetTime

	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetDelay, Instruction2.OnsetDelay
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetTime, Instruction2.OnsetTime
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameDurationError, Instruction2.DurationError
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRTTime, Instruction2.RTTime
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameACC, Instruction2.ACC
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRT, Instruction2.RT
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameRESP, Instruction2.RESP
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameCRESP, Instruction2.CRESP
	c.SetAttrib Instruction2.Name & ebDot & ebLogNameOnsetToOnsetTime, Instruction2.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Ratings_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	thanksforplaying.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		thanksforplayingEchoClients.RemoveAll
		thanksforplaying.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(thanksforplaying.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	thanksforplaying.Run
		RatingsList.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Ratings_theCollection.RemoveAll
	For Ratings_nObject = 1 To Ratings.ChildObjectCount
		Set Ratings_theInputObject = CRteRunnableInputObject(Rte.GetObject(Ratings.GetChildObjectName(Ratings_nObject)))
		If Not Ratings_theInputObject Is Nothing Then Ratings_theCollection.Add Ratings_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Ratings_bCanExit = True
		For Ratings_nObject = 1 To Ratings_theCollection.Count
			Set Ratings_theInputObject = CRteRunnableInputObject(Ratings_theCollection(Ratings_nObject))
			If Not Ratings_theInputObject Is Nothing Then
				If Ratings_theInputObject.InputMasks.IsPending() Then
					Ratings_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Ratings_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Ratings_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	thanksforplaying.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub SelfTask_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 BEGIN <InLine1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,10
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - InLine1 END
	'''''''''''''''''''''''''''''''''''''''''''''

		List3.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	SelfTask_theCollection.RemoveAll
	For SelfTask_nObject = 1 To SelfTask.ChildObjectCount
		Set SelfTask_theInputObject = CRteRunnableInputObject(Rte.GetObject(SelfTask.GetChildObjectName(SelfTask_nObject)))
		If Not SelfTask_theInputObject Is Nothing Then SelfTask_theCollection.Add SelfTask_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		SelfTask_bCanExit = True
		For SelfTask_nObject = 1 To SelfTask_theCollection.Count
			Set SelfTask_theInputObject = CRteRunnableInputObject(SelfTask_theCollection(SelfTask_nObject))
			If Not SelfTask_theInputObject Is Nothing Then
				If SelfTask_theInputObject.InputMasks.IsPending() Then
					SelfTask_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If SelfTask_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	SelfTask_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub OtherTask_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		OtherBlockInstructions.ResetLoggingProperties

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	OtherBlockInstructions.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		OtherBlockInstructionsEchoClients.RemoveAll
		OtherBlockInstructions.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(OtherBlockInstructions.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	OtherBlockInstructions.Run

		List2.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	OtherTask_theCollection.RemoveAll
	For OtherTask_nObject = 1 To OtherTask.ChildObjectCount
		Set OtherTask_theInputObject = CRteRunnableInputObject(Rte.GetObject(OtherTask.GetChildObjectName(OtherTask_nObject)))
		If Not OtherTask_theInputObject Is Nothing Then OtherTask_theCollection.Add OtherTask_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		OtherTask_bCanExit = True
		For OtherTask_nObject = 1 To OtherTask_theCollection.Count
			Set OtherTask_theInputObject = CRteRunnableInputObject(OtherTask_theCollection(OtherTask_nObject))
			If Not OtherTask_theInputObject Is Nothing Then
				If OtherTask_theInputObject.InputMasks.IsPending() Then
					OtherTask_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If OtherTask_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	OtherTask_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	OtherBlockInstructions.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub BothTask_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		BothBlockInstructions.ResetLoggingProperties

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	BothBlockInstructions.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		BothBlockInstructionsEchoClients.RemoveAll
		BothBlockInstructions.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(BothBlockInstructions.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	BothBlockInstructions.Run

	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetDelay, BothBlockInstructions.OnsetDelay
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetTime, BothBlockInstructions.OnsetTime
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameDurationError, BothBlockInstructions.DurationError
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRTTime, BothBlockInstructions.RTTime
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameACC, BothBlockInstructions.ACC
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRT, BothBlockInstructions.RT
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRESP, BothBlockInstructions.RESP
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameCRESP, BothBlockInstructions.CRESP
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetToOnsetTime, BothBlockInstructions.OnsetToOnsetTime

		List10.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	BothTask_theCollection.RemoveAll
	For BothTask_nObject = 1 To BothTask.ChildObjectCount
		Set BothTask_theInputObject = CRteRunnableInputObject(Rte.GetObject(BothTask.GetChildObjectName(BothTask_nObject)))
		If Not BothTask_theInputObject Is Nothing Then BothTask_theCollection.Add BothTask_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		BothTask_bCanExit = True
		For BothTask_nObject = 1 To BothTask_theCollection.Count
			Set BothTask_theInputObject = CRteRunnableInputObject(BothTask_theCollection(BothTask_nObject))
			If Not BothTask_theInputObject Is Nothing Then
				If BothTask_theInputObject.InputMasks.IsPending() Then
					BothTask_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If BothTask_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	BothTask_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	BothBlockInstructions.EndOfProcedure

	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetDelay, BothBlockInstructions.OnsetDelay
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetTime, BothBlockInstructions.OnsetTime
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameDurationError, BothBlockInstructions.DurationError
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRTTime, BothBlockInstructions.RTTime
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameACC, BothBlockInstructions.ACC
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRT, BothBlockInstructions.RT
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameRESP, BothBlockInstructions.RESP
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameCRESP, BothBlockInstructions.CRESP
	c.SetAttrib BothBlockInstructions.Name & ebDot & ebLogNameOnsetToOnsetTime, BothBlockInstructions.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub







Sub LASelfMixed_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For SelfFB_ChildIterator = 1 To LASelfMixed.ChildObjectCount
		Set SelfFB_Child = CRteRunnableInputObject(Rte.GetObject(LASelfMixed.GetChildObjectName(SelfFB_ChildIterator)))
		If Not SelfFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If SelfFB_Child.Name = SelfFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For SelfFB_MaskIterator = 1 To SelfFB_Child.InputMasks.Count
				Set SelfFB_Mask = SelfFB_Child.InputMasks(SelfFB_MaskIterator)
				If Not SelfFB_Mask Is Nothing Then
					If SelfFB_Mask.Status = ebStatusArmed Then
						If SelfFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							SelfFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		SelfFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		SelfFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			SelfFB.RTStats.AddObservation Response.RT
			SelfFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			SelfFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			SelfFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			SelfFB.RTStats.AddObservation Response.RT
			SelfFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			SelfFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If SelfFB.CollectNoRespACCStats = True Then
				SelfFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case SelfFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set SelfFB_SlideText = CSlideText(SelfFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			SelfFB_SlideText.Text = "You " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set SelfFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set SelfFB_SlideText = CSlideText(SelfFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			SelfFB_SlideText.Text = "You will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set SelfFB_SlideText = Nothing

	End Select



	SelfFB.Run


	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetDelay, SelfFB.OnsetDelay
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetTime, SelfFB.OnsetTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameDurationError, SelfFB.DurationError
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRTTime, SelfFB.RTTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameACC, SelfFB.ACC
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRT, SelfFB.RT
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRESP, SelfFB.RESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameCRESP, SelfFB.CRESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LASelfMixed_theCollection.RemoveAll
	For LASelfMixed_nObject = 1 To LASelfMixed.ChildObjectCount
		Set LASelfMixed_theInputObject = CRteRunnableInputObject(Rte.GetObject(LASelfMixed.GetChildObjectName(LASelfMixed_nObject)))
		If Not LASelfMixed_theInputObject Is Nothing Then LASelfMixed_theCollection.Add LASelfMixed_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LASelfMixed_bCanExit = True
		For LASelfMixed_nObject = 1 To LASelfMixed_theCollection.Count
			Set LASelfMixed_theInputObject = CRteRunnableInputObject(LASelfMixed_theCollection(LASelfMixed_nObject))
			If Not LASelfMixed_theInputObject Is Nothing Then
				If LASelfMixed_theInputObject.InputMasks.IsPending() Then
					LASelfMixed_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LASelfMixed_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LASelfMixed_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	SelfFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetDelay, SelfFB.OnsetDelay
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetTime, SelfFB.OnsetTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameDurationError, SelfFB.DurationError
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRTTime, SelfFB.RTTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameACC, SelfFB.ACC
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRT, SelfFB.RT
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRESP, SelfFB.RESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameCRESP, SelfFB.CRESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub LASelfGain_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For SelfFB_ChildIterator = 1 To LASelfGain.ChildObjectCount
		Set SelfFB_Child = CRteRunnableInputObject(Rte.GetObject(LASelfGain.GetChildObjectName(SelfFB_ChildIterator)))
		If Not SelfFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If SelfFB_Child.Name = SelfFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For SelfFB_MaskIterator = 1 To SelfFB_Child.InputMasks.Count
				Set SelfFB_Mask = SelfFB_Child.InputMasks(SelfFB_MaskIterator)
				If Not SelfFB_Mask Is Nothing Then
					If SelfFB_Mask.Status = ebStatusArmed Then
						If SelfFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							SelfFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		SelfFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		SelfFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			SelfFB.RTStats.AddObservation Response.RT
			SelfFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			SelfFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			SelfFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			SelfFB.RTStats.AddObservation Response.RT
			SelfFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			SelfFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If SelfFB.CollectNoRespACCStats = True Then
				SelfFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case SelfFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set SelfFB_SlideText = CSlideText(SelfFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			SelfFB_SlideText.Text = "You " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set SelfFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set SelfFB_SlideText = CSlideText(SelfFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			SelfFB_SlideText.Text = "You will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set SelfFB_SlideText = Nothing

	End Select



	SelfFB.Run


	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetDelay, SelfFB.OnsetDelay
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetTime, SelfFB.OnsetTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameDurationError, SelfFB.DurationError
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRTTime, SelfFB.RTTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameACC, SelfFB.ACC
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRT, SelfFB.RT
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRESP, SelfFB.RESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameCRESP, SelfFB.CRESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LASelfGain_theCollection.RemoveAll
	For LASelfGain_nObject = 1 To LASelfGain.ChildObjectCount
		Set LASelfGain_theInputObject = CRteRunnableInputObject(Rte.GetObject(LASelfGain.GetChildObjectName(LASelfGain_nObject)))
		If Not LASelfGain_theInputObject Is Nothing Then LASelfGain_theCollection.Add LASelfGain_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LASelfGain_bCanExit = True
		For LASelfGain_nObject = 1 To LASelfGain_theCollection.Count
			Set LASelfGain_theInputObject = CRteRunnableInputObject(LASelfGain_theCollection(LASelfGain_nObject))
			If Not LASelfGain_theInputObject Is Nothing Then
				If LASelfGain_theInputObject.InputMasks.IsPending() Then
					LASelfGain_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LASelfGain_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LASelfGain_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	SelfFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetDelay, SelfFB.OnsetDelay
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetTime, SelfFB.OnsetTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameDurationError, SelfFB.DurationError
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRTTime, SelfFB.RTTime
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameACC, SelfFB.ACC
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRT, SelfFB.RT
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameRESP, SelfFB.RESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameCRESP, SelfFB.CRESP
	c.SetAttrib SelfFB.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Self1_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		SelfSpaceBar1.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	SelfSpaceBar1.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		SelfSpaceBar1EchoClients.RemoveAll
		SelfSpaceBar1.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_A & ebUCase_N & ebUCase_Y & ebBraceClose, ebEmptyText, CLng(SelfSpaceBar1.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	SelfSpaceBar1.Run
		List4.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Self1_theCollection.RemoveAll
	For Self1_nObject = 1 To Self1.ChildObjectCount
		Set Self1_theInputObject = CRteRunnableInputObject(Rte.GetObject(Self1.GetChildObjectName(Self1_nObject)))
		If Not Self1_theInputObject Is Nothing Then Self1_theCollection.Add Self1_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Self1_bCanExit = True
		For Self1_nObject = 1 To Self1_theCollection.Count
			Set Self1_theInputObject = CRteRunnableInputObject(Self1_theCollection(Self1_nObject))
			If Not Self1_theInputObject Is Nothing Then
				If Self1_theInputObject.InputMasks.IsPending() Then
					Self1_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Self1_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Self1_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SelfSpaceBar1.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Self2_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		SelfSpaceBar2.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	SelfSpaceBar2.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		SelfSpaceBar2EchoClients.RemoveAll
		SelfSpaceBar2.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(SelfSpaceBar2.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	SelfSpaceBar2.Run
		List5.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Self2_theCollection.RemoveAll
	For Self2_nObject = 1 To Self2.ChildObjectCount
		Set Self2_theInputObject = CRteRunnableInputObject(Rte.GetObject(Self2.GetChildObjectName(Self2_nObject)))
		If Not Self2_theInputObject Is Nothing Then Self2_theCollection.Add Self2_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Self2_bCanExit = True
		For Self2_nObject = 1 To Self2_theCollection.Count
			Set Self2_theInputObject = CRteRunnableInputObject(Self2_theCollection(Self2_nObject))
			If Not Self2_theInputObject Is Nothing Then
				If Self2_theInputObject.InputMasks.IsPending() Then
					Self2_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Self2_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Self2_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SelfSpaceBar2.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Self3_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		SelfSpaceBar3.ResetLoggingProperties
		pleasenotify.ResetLoggingProperties



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	SelfSpaceBar3.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		SelfSpaceBar3EchoClients.RemoveAll
		SelfSpaceBar3.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(SelfSpaceBar3.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	SelfSpaceBar3.Run
		List6.Run c


	pleasenotify.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		pleasenotifyEchoClients.RemoveAll
		pleasenotify.InputMasks.Add Keyboard.CreateInputMask(ebLCase_z, ebEmptyText, CLng(pleasenotify.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	pleasenotify.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Self3_theCollection.RemoveAll
	For Self3_nObject = 1 To Self3.ChildObjectCount
		Set Self3_theInputObject = CRteRunnableInputObject(Rte.GetObject(Self3.GetChildObjectName(Self3_nObject)))
		If Not Self3_theInputObject Is Nothing Then Self3_theCollection.Add Self3_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Self3_bCanExit = True
		For Self3_nObject = 1 To Self3_theCollection.Count
			Set Self3_theInputObject = CRteRunnableInputObject(Self3_theCollection(Self3_nObject))
			If Not Self3_theInputObject Is Nothing Then
				If Self3_theInputObject.InputMasks.IsPending() Then
					Self3_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Self3_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Self3_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SelfSpaceBar3.EndOfProcedure

	pleasenotify.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Other1_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		OtherSpaceBar1.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	OtherSpaceBar1.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		OtherSpaceBar1EchoClients.RemoveAll
		OtherSpaceBar1.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(OtherSpaceBar1.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	OtherSpaceBar1.Run
		List7.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Other1_theCollection.RemoveAll
	For Other1_nObject = 1 To Other1.ChildObjectCount
		Set Other1_theInputObject = CRteRunnableInputObject(Rte.GetObject(Other1.GetChildObjectName(Other1_nObject)))
		If Not Other1_theInputObject Is Nothing Then Other1_theCollection.Add Other1_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Other1_bCanExit = True
		For Other1_nObject = 1 To Other1_theCollection.Count
			Set Other1_theInputObject = CRteRunnableInputObject(Other1_theCollection(Other1_nObject))
			If Not Other1_theInputObject Is Nothing Then
				If Other1_theInputObject.InputMasks.IsPending() Then
					Other1_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Other1_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Other1_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	OtherSpaceBar1.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Other2_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		OtherSpaceBar2.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	OtherSpaceBar2.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		OtherSpaceBar2EchoClients.RemoveAll
		OtherSpaceBar2.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(OtherSpaceBar2.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	OtherSpaceBar2.Run
		List8.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Other2_theCollection.RemoveAll
	For Other2_nObject = 1 To Other2.ChildObjectCount
		Set Other2_theInputObject = CRteRunnableInputObject(Rte.GetObject(Other2.GetChildObjectName(Other2_nObject)))
		If Not Other2_theInputObject Is Nothing Then Other2_theCollection.Add Other2_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Other2_bCanExit = True
		For Other2_nObject = 1 To Other2_theCollection.Count
			Set Other2_theInputObject = CRteRunnableInputObject(Other2_theCollection(Other2_nObject))
			If Not Other2_theInputObject Is Nothing Then
				If Other2_theInputObject.InputMasks.IsPending() Then
					Other2_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Other2_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Other2_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	OtherSpaceBar2.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Other3_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		OtherSpaceBar3.ResetLoggingProperties
		pleasenotify.ResetLoggingProperties



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	OtherSpaceBar3.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		OtherSpaceBar3EchoClients.RemoveAll
		OtherSpaceBar3.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(OtherSpaceBar3.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	OtherSpaceBar3.Run
		List9.Run c


	pleasenotify.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		pleasenotifyEchoClients.RemoveAll
		pleasenotify.InputMasks.Add Keyboard.CreateInputMask(ebLCase_z, ebEmptyText, CLng(pleasenotify.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	pleasenotify.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Other3_theCollection.RemoveAll
	For Other3_nObject = 1 To Other3.ChildObjectCount
		Set Other3_theInputObject = CRteRunnableInputObject(Rte.GetObject(Other3.GetChildObjectName(Other3_nObject)))
		If Not Other3_theInputObject Is Nothing Then Other3_theCollection.Add Other3_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Other3_bCanExit = True
		For Other3_nObject = 1 To Other3_theCollection.Count
			Set Other3_theInputObject = CRteRunnableInputObject(Other3_theCollection(Other3_nObject))
			If Not Other3_theInputObject Is Nothing Then
				If Other3_theInputObject.InputMasks.IsPending() Then
					Other3_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Other3_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Other3_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	OtherSpaceBar3.EndOfProcedure

	pleasenotify.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Both1_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		BothSpaceBar1.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	BothSpaceBar1.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		BothSpaceBar1EchoClients.RemoveAll
		BothSpaceBar1.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(BothSpaceBar1.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	BothSpaceBar1.Run
		List11.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Both1_theCollection.RemoveAll
	For Both1_nObject = 1 To Both1.ChildObjectCount
		Set Both1_theInputObject = CRteRunnableInputObject(Rte.GetObject(Both1.GetChildObjectName(Both1_nObject)))
		If Not Both1_theInputObject Is Nothing Then Both1_theCollection.Add Both1_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Both1_bCanExit = True
		For Both1_nObject = 1 To Both1_theCollection.Count
			Set Both1_theInputObject = CRteRunnableInputObject(Both1_theCollection(Both1_nObject))
			If Not Both1_theInputObject Is Nothing Then
				If Both1_theInputObject.InputMasks.IsPending() Then
					Both1_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Both1_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Both1_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	BothSpaceBar1.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Both2_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		BothSpaceBar2.ResetLoggingProperties


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	BothSpaceBar2.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		BothSpaceBar2EchoClients.RemoveAll
		BothSpaceBar2.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(BothSpaceBar2.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	BothSpaceBar2.Run
		List12.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Both2_theCollection.RemoveAll
	For Both2_nObject = 1 To Both2.ChildObjectCount
		Set Both2_theInputObject = CRteRunnableInputObject(Rte.GetObject(Both2.GetChildObjectName(Both2_nObject)))
		If Not Both2_theInputObject Is Nothing Then Both2_theCollection.Add Both2_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Both2_bCanExit = True
		For Both2_nObject = 1 To Both2_theCollection.Count
			Set Both2_theInputObject = CRteRunnableInputObject(Both2_theCollection(Both2_nObject))
			If Not Both2_theInputObject Is Nothing Then
				If Both2_theInputObject.InputMasks.IsPending() Then
					Both2_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Both2_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Both2_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	BothSpaceBar2.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub Both3_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		BothSpaceBar3.ResetLoggingProperties
		pleasenotify.ResetLoggingProperties



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	BothSpaceBar3.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		BothSpaceBar3EchoClients.RemoveAll
		BothSpaceBar3.InputMasks.Add Keyboard.CreateInputMask(ebBraceOpen & ebUCase_S & ebUCase_P & ebUCase_A & ebUCase_C & ebUCase_E & ebBraceClose, ebEmptyText, CLng(BothSpaceBar3.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	BothSpaceBar3.Run
		List13.Run c


	pleasenotify.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		pleasenotifyEchoClients.RemoveAll
		pleasenotify.InputMasks.Add Keyboard.CreateInputMask(ebLCase_z, ebEmptyText, CLng(pleasenotify.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	pleasenotify.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	Both3_theCollection.RemoveAll
	For Both3_nObject = 1 To Both3.ChildObjectCount
		Set Both3_theInputObject = CRteRunnableInputObject(Rte.GetObject(Both3.GetChildObjectName(Both3_nObject)))
		If Not Both3_theInputObject Is Nothing Then Both3_theCollection.Add Both3_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		Both3_bCanExit = True
		For Both3_nObject = 1 To Both3_theCollection.Count
			Set Both3_theInputObject = CRteRunnableInputObject(Both3_theCollection(Both3_nObject))
			If Not Both3_theInputObject Is Nothing Then
				If Both3_theInputObject.InputMasks.IsPending() Then
					Both3_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If Both3_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	Both3_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	BothSpaceBar3.EndOfProcedure

	pleasenotify.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub LAOtherMixed_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For OtherFB_ChildIterator = 1 To LAOtherMixed.ChildObjectCount
		Set OtherFB_Child = CRteRunnableInputObject(Rte.GetObject(LAOtherMixed.GetChildObjectName(OtherFB_ChildIterator)))
		If Not OtherFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If OtherFB_Child.Name = OtherFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For OtherFB_MaskIterator = 1 To OtherFB_Child.InputMasks.Count
				Set OtherFB_Mask = OtherFB_Child.InputMasks(OtherFB_MaskIterator)
				If Not OtherFB_Mask Is Nothing Then
					If OtherFB_Mask.Status = ebStatusArmed Then
						If OtherFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							OtherFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		OtherFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		OtherFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			OtherFB.RTStats.AddObservation Response.RT
			OtherFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			OtherFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			OtherFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			OtherFB.RTStats.AddObservation Response.RT
			OtherFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			OtherFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If OtherFB.CollectNoRespACCStats = True Then
				OtherFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case OtherFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set OtherFB_SlideText = CSlideText(OtherFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			OtherFB_SlideText.Text = c.GetAttrib("PartnerName") &_
				" " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set OtherFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set OtherFB_SlideText = CSlideText(OtherFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			OtherFB_SlideText.Text = c.GetAttrib("PartnerName") &_
				" will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set OtherFB_SlideText = Nothing

	End Select



	OtherFB.Run


	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetDelay, OtherFB.OnsetDelay
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetTime, OtherFB.OnsetTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameDurationError, OtherFB.DurationError
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRTTime, OtherFB.RTTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameACC, OtherFB.ACC
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRT, OtherFB.RT
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRESP, OtherFB.RESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameCRESP, OtherFB.CRESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetToOnsetTime, OtherFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LAOtherMixed_theCollection.RemoveAll
	For LAOtherMixed_nObject = 1 To LAOtherMixed.ChildObjectCount
		Set LAOtherMixed_theInputObject = CRteRunnableInputObject(Rte.GetObject(LAOtherMixed.GetChildObjectName(LAOtherMixed_nObject)))
		If Not LAOtherMixed_theInputObject Is Nothing Then LAOtherMixed_theCollection.Add LAOtherMixed_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LAOtherMixed_bCanExit = True
		For LAOtherMixed_nObject = 1 To LAOtherMixed_theCollection.Count
			Set LAOtherMixed_theInputObject = CRteRunnableInputObject(LAOtherMixed_theCollection(LAOtherMixed_nObject))
			If Not LAOtherMixed_theInputObject Is Nothing Then
				If LAOtherMixed_theInputObject.InputMasks.IsPending() Then
					LAOtherMixed_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LAOtherMixed_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LAOtherMixed_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	OtherFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetDelay, OtherFB.OnsetDelay
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetTime, OtherFB.OnsetTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameDurationError, OtherFB.DurationError
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRTTime, OtherFB.RTTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameACC, OtherFB.ACC
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRT, OtherFB.RT
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRESP, OtherFB.RESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameCRESP, OtherFB.CRESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetToOnsetTime, OtherFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub LAOtherGain_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For OtherFB_ChildIterator = 1 To LAOtherGain.ChildObjectCount
		Set OtherFB_Child = CRteRunnableInputObject(Rte.GetObject(LAOtherGain.GetChildObjectName(OtherFB_ChildIterator)))
		If Not OtherFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If OtherFB_Child.Name = OtherFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For OtherFB_MaskIterator = 1 To OtherFB_Child.InputMasks.Count
				Set OtherFB_Mask = OtherFB_Child.InputMasks(OtherFB_MaskIterator)
				If Not OtherFB_Mask Is Nothing Then
					If OtherFB_Mask.Status = ebStatusArmed Then
						If OtherFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							OtherFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		OtherFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		OtherFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			OtherFB.RTStats.AddObservation Response.RT
			OtherFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			OtherFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			OtherFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			OtherFB.RTStats.AddObservation Response.RT
			OtherFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			OtherFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If OtherFB.CollectNoRespACCStats = True Then
				OtherFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case OtherFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set OtherFB_SlideText = CSlideText(OtherFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			OtherFB_SlideText.Text = c.GetAttrib("PartnerName") &_
				" " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set OtherFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set OtherFB_SlideText = CSlideText(OtherFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			OtherFB_SlideText.Text = c.GetAttrib("PartnerName") &_
				" will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set OtherFB_SlideText = Nothing

	End Select



	OtherFB.Run


	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetDelay, OtherFB.OnsetDelay
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetTime, OtherFB.OnsetTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameDurationError, OtherFB.DurationError
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRTTime, OtherFB.RTTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameACC, OtherFB.ACC
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRT, OtherFB.RT
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRESP, OtherFB.RESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameCRESP, OtherFB.CRESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetToOnsetTime, OtherFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LAOtherGain_theCollection.RemoveAll
	For LAOtherGain_nObject = 1 To LAOtherGain.ChildObjectCount
		Set LAOtherGain_theInputObject = CRteRunnableInputObject(Rte.GetObject(LAOtherGain.GetChildObjectName(LAOtherGain_nObject)))
		If Not LAOtherGain_theInputObject Is Nothing Then LAOtherGain_theCollection.Add LAOtherGain_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LAOtherGain_bCanExit = True
		For LAOtherGain_nObject = 1 To LAOtherGain_theCollection.Count
			Set LAOtherGain_theInputObject = CRteRunnableInputObject(LAOtherGain_theCollection(LAOtherGain_nObject))
			If Not LAOtherGain_theInputObject Is Nothing Then
				If LAOtherGain_theInputObject.InputMasks.IsPending() Then
					LAOtherGain_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LAOtherGain_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LAOtherGain_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	OtherFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetDelay, OtherFB.OnsetDelay
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetTime, OtherFB.OnsetTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameDurationError, OtherFB.DurationError
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRTTime, OtherFB.RTTime
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameACC, OtherFB.ACC
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRT, OtherFB.RT
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameRESP, OtherFB.RESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameCRESP, OtherFB.CRESP
	c.SetAttrib OtherFB.Name & ebDot & ebLogNameOnsetToOnsetTime, OtherFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub LABothMixed_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For BothFB_ChildIterator = 1 To LABothMixed.ChildObjectCount
		Set BothFB_Child = CRteRunnableInputObject(Rte.GetObject(LABothMixed.GetChildObjectName(BothFB_ChildIterator)))
		If Not BothFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If BothFB_Child.Name = BothFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For BothFB_MaskIterator = 1 To BothFB_Child.InputMasks.Count
				Set BothFB_Mask = BothFB_Child.InputMasks(BothFB_MaskIterator)
				If Not BothFB_Mask Is Nothing Then
					If BothFB_Mask.Status = ebStatusArmed Then
						If BothFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							BothFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		BothFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		BothFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			BothFB.RTStats.AddObservation Response.RT
			BothFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			BothFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			BothFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			BothFB.RTStats.AddObservation Response.RT
			BothFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			BothFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If BothFB.CollectNoRespACCStats = True Then
				BothFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case BothFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set BothFB_SlideText = CSlideText(BothFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			BothFB_SlideText.Text = "You and " &_
				c.GetAttrib("PartnerName") &_
				" " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set BothFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set BothFB_SlideText = CSlideText(BothFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			BothFB_SlideText.Text = "You and " &_
				c.GetAttrib("PartnerName") &_
				" will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set BothFB_SlideText = Nothing

	End Select



	BothFB.Run


	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetDelay, BothFB.OnsetDelay
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetTime, BothFB.OnsetTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameDurationError, BothFB.DurationError
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRTTime, BothFB.RTTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameACC, BothFB.ACC
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRT, BothFB.RT
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRESP, BothFB.RESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameCRESP, BothFB.CRESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetToOnsetTime, BothFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LABothMixed_theCollection.RemoveAll
	For LABothMixed_nObject = 1 To LABothMixed.ChildObjectCount
		Set LABothMixed_theInputObject = CRteRunnableInputObject(Rte.GetObject(LABothMixed.GetChildObjectName(LABothMixed_nObject)))
		If Not LABothMixed_theInputObject Is Nothing Then LABothMixed_theCollection.Add LABothMixed_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LABothMixed_bCanExit = True
		For LABothMixed_nObject = 1 To LABothMixed_theCollection.Count
			Set LABothMixed_theInputObject = CRteRunnableInputObject(LABothMixed_theCollection(LABothMixed_nObject))
			If Not LABothMixed_theInputObject Is Nothing Then
				If LABothMixed_theInputObject.InputMasks.IsPending() Then
					LABothMixed_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LABothMixed_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LABothMixed_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	BothFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetDelay, BothFB.OnsetDelay
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetTime, BothFB.OnsetTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameDurationError, BothFB.DurationError
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRTTime, BothFB.RTTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameACC, BothFB.ACC
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRT, BothFB.RT
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRESP, BothFB.RESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameCRESP, BothFB.CRESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetToOnsetTime, BothFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub LABothGain_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Options.ResetLoggingProperties
		Response.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITI.ResetLoggingProperties
		Select Case Options.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text4
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_4))
			Options_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Options_SlideText = Nothing

			'Text2
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Options_SlideText = Nothing

			'Text1
			Set Options_SlideText = CSlideText(Options.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Options_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Options_SlideText = Nothing

	End Select

		Select Case Response.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			Response_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set Response_SlideText = Nothing

			'Text2
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set Response_SlideText = Nothing

			'Text1
			Set Response_SlideText = CSlideText(Response.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			Response_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set Response_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn BEGIN <PulseOn>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn END
	'''''''''''''''''''''''''''''''''''''''''''''


	Options.Run

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime



	Response.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		ResponseEchoClients.RemoveAll
		Response.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(Response.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	Response.Run

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff BEGIN <PulseOff>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff END
	'''''''''''''''''''''''''''''''''''''''''''''


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 BEGIN <PulseOn1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,1

	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOn1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not Response.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For BothFB_ChildIterator = 1 To LABothGain.ChildObjectCount
		Set BothFB_Child = CRteRunnableInputObject(Rte.GetObject(LABothGain.GetChildObjectName(BothFB_ChildIterator)))
		If Not BothFB_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If BothFB_Child.Name = BothFB.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For BothFB_MaskIterator = 1 To BothFB_Child.InputMasks.Count
				Set BothFB_Mask = BothFB_Child.InputMasks(BothFB_MaskIterator)
				If Not BothFB_Mask Is Nothing Then
					If BothFB_Mask.Status = ebStatusArmed Then
						If BothFB_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							BothFB_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If Response.ACC = 1 Then
		'Set the ActiveState to Correct
		BothFB.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		BothFB.AccStats.AddObservation Response.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(Response.RESP) > 0 Then
			BothFB.RTStats.AddObservation Response.RT
			BothFB.CorrectRTStats.AddObservation Response.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(Response.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			BothFB.ActiveState = "Incorrect"

			'Set the accuracy stats
			BothFB.AccStats.AddObservation Response.Acc

			'Set the RT stats
			BothFB.RTStats.AddObservation Response.RT
			BothFB.IncorrectRTStats.AddObservation Response.RT
		Else
			'Set the ActiveState to NoResponse
			BothFB.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If BothFB.CollectNoRespACCStats = True Then
				BothFB.AccStats.AddObservation Response.Acc
			End If
		End If
	End If


	Select Case BothFB.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set BothFB_SlideText = CSlideText(BothFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			BothFB_SlideText.Text = "You and " &_
				c.GetAttrib("PartnerName") &_
				" " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set BothFB_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set BothFB_SlideText = CSlideText(BothFB.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			BothFB_SlideText.Text = "You and " &_
				c.GetAttrib("PartnerName") &_
				" will receive the certain option of " &_
				c.GetAttrib("Certain")
			Set BothFB_SlideText = Nothing

	End Select



	BothFB.Run


	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetDelay, BothFB.OnsetDelay
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetTime, BothFB.OnsetTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameDurationError, BothFB.DurationError
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRTTime, BothFB.RTTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameACC, BothFB.ACC
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRT, BothFB.RT
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRESP, BothFB.RESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameCRESP, BothFB.CRESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetToOnsetTime, BothFB.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 BEGIN <PulseOff1>
	'''''''''''''''''''''''''''''''''''''''''''''
	WritePort &hE010,0
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - PulseOff1 END
	'''''''''''''''''''''''''''''''''''''''''''''


	ITI.Duration = CLng(c.GetAttrib(ebUCase_I & ebUCase_T & ebUCase_I & ebLCase_l & ebLCase_e & ebLCase_n & ebLCase_g & ebLCase_t & ebLCase_h))
	ITI.Run
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	LABothGain_theCollection.RemoveAll
	For LABothGain_nObject = 1 To LABothGain.ChildObjectCount
		Set LABothGain_theInputObject = CRteRunnableInputObject(Rte.GetObject(LABothGain.GetChildObjectName(LABothGain_nObject)))
		If Not LABothGain_theInputObject Is Nothing Then LABothGain_theCollection.Add LABothGain_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		LABothGain_bCanExit = True
		For LABothGain_nObject = 1 To LABothGain_theCollection.Count
			Set LABothGain_theInputObject = CRteRunnableInputObject(LABothGain_theCollection(LABothGain_nObject))
			If Not LABothGain_theInputObject Is Nothing Then
				If LABothGain_theInputObject.InputMasks.IsPending() Then
					LABothGain_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If LABothGain_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	LABothGain_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	Options.EndOfProcedure

	Response.EndOfProcedure

	ISI.EndOfProcedure

	BothFB.EndOfProcedure

	ITI.EndOfProcedure

	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetDelay, Options.OnsetDelay
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetTime, Options.OnsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameDurationError, Options.DurationError
	c.SetAttrib Options.Name & ebDot & ebLogNameDuration, Options.Duration
	c.SetAttrib Options.Name & ebDot & ebLogNameOffsetTime, Options.OffsetTime
	c.SetAttrib Options.Name & ebDot & ebLogNameRTTime, Options.RTTime
	c.SetAttrib Options.Name & ebDot & ebLogNameACC, Options.ACC
	c.SetAttrib Options.Name & ebDot & ebLogNameRT, Options.RT
	c.SetAttrib Options.Name & ebDot & ebLogNameRESP, Options.RESP
	c.SetAttrib Options.Name & ebDot & ebLogNameCRESP, Options.CRESP
	c.SetAttrib Options.Name & ebDot & ebLogNameOnsetToOnsetTime, Options.OnsetToOnsetTime

	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetDelay, Response.OnsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetTime, Response.OnsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameDurationError, Response.DurationError
	c.SetAttrib Response.Name & ebDot & ebLogNameDuration, Response.Duration
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetTime, Response.OffsetTime
	c.SetAttrib Response.Name & ebDot & ebLogNameOffsetDelay, Response.OffsetDelay
	c.SetAttrib Response.Name & ebDot & ebLogNameRTTime, Response.RTTime
	c.SetAttrib Response.Name & ebDot & ebLogNameACC, Response.ACC
	c.SetAttrib Response.Name & ebDot & ebLogNameRT, Response.RT
	c.SetAttrib Response.Name & ebDot & ebLogNameRESP, Response.RESP
	c.SetAttrib Response.Name & ebDot & ebLogNameCRESP, Response.CRESP
	c.SetAttrib Response.Name & ebDot & ebLogNameOnsetToOnsetTime, Response.OnsetToOnsetTime

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime

	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetDelay, BothFB.OnsetDelay
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetTime, BothFB.OnsetTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameDurationError, BothFB.DurationError
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRTTime, BothFB.RTTime
	c.SetAttrib BothFB.Name & ebDot & ebLogNameACC, BothFB.ACC
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRT, BothFB.RT
	c.SetAttrib BothFB.Name & ebDot & ebLogNameRESP, BothFB.RESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameCRESP, BothFB.CRESP
	c.SetAttrib BothFB.Name & ebDot & ebLogNameOnsetToOnsetTime, BothFB.OnsetToOnsetTime

	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetDelay, ITI.OnsetDelay
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetTime, ITI.OnsetTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameDurationError, ITI.DurationError
	c.SetAttrib ITI.Name & ebDot & ebLogNameRTTime, ITI.RTTime
	c.SetAttrib ITI.Name & ebDot & ebLogNameACC, ITI.ACC
	c.SetAttrib ITI.Name & ebDot & ebLogNameRT, ITI.RT
	c.SetAttrib ITI.Name & ebDot & ebLogNameRESP, ITI.RESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameCRESP, ITI.CRESP
	c.SetAttrib ITI.Name & ebDot & ebLogNameOnsetToOnsetTime, ITI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub













Sub PracticeTrials_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		List14.Run c
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	PracticeTrials_theCollection.RemoveAll
	For PracticeTrials_nObject = 1 To PracticeTrials.ChildObjectCount
		Set PracticeTrials_theInputObject = CRteRunnableInputObject(Rte.GetObject(PracticeTrials.GetChildObjectName(PracticeTrials_nObject)))
		If Not PracticeTrials_theInputObject Is Nothing Then PracticeTrials_theCollection.Add PracticeTrials_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		PracticeTrials_bCanExit = True
		For PracticeTrials_nObject = 1 To PracticeTrials_theCollection.Count
			Set PracticeTrials_theInputObject = CRteRunnableInputObject(PracticeTrials_theCollection(PracticeTrials_nObject))
			If Not PracticeTrials_theInputObject Is Nothing Then
				If PracticeTrials_theInputObject.InputMasks.IsPending() Then
					PracticeTrials_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If PracticeTrials_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	PracticeTrials_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub PracticeMixed_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		practiceoptions.ResetLoggingProperties
		practiceresponse.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITIPrac.ResetLoggingProperties
		Select Case practiceoptions.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set practiceoptions_SlideText = CSlideText(practiceoptions.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			practiceoptions_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set practiceoptions_SlideText = Nothing

			'Text2
			Set practiceoptions_SlideText = CSlideText(practiceoptions.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			practiceoptions_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set practiceoptions_SlideText = Nothing

			'Text1
			Set practiceoptions_SlideText = CSlideText(practiceoptions.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			practiceoptions_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set practiceoptions_SlideText = Nothing

	End Select

		Select Case practiceresponse.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set practiceresponse_SlideText = CSlideText(practiceresponse.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			practiceresponse_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set practiceresponse_SlideText = Nothing

			'Text2
			Set practiceresponse_SlideText = CSlideText(practiceresponse.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			practiceresponse_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set practiceresponse_SlideText = Nothing

			'Text1
			Set practiceresponse_SlideText = CSlideText(practiceresponse.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			practiceresponse_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set practiceresponse_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	practiceoptions.Run



	practiceresponse.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		practiceresponseEchoClients.RemoveAll
		practiceresponse.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(practiceresponse.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	practiceresponse.Run


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not practiceresponse.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For FeedbackDisplay2_ChildIterator = 1 To PracticeMixed.ChildObjectCount
		Set FeedbackDisplay2_Child = CRteRunnableInputObject(Rte.GetObject(PracticeMixed.GetChildObjectName(FeedbackDisplay2_ChildIterator)))
		If Not FeedbackDisplay2_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If FeedbackDisplay2_Child.Name = FeedbackDisplay2.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For FeedbackDisplay2_MaskIterator = 1 To FeedbackDisplay2_Child.InputMasks.Count
				Set FeedbackDisplay2_Mask = FeedbackDisplay2_Child.InputMasks(FeedbackDisplay2_MaskIterator)
				If Not FeedbackDisplay2_Mask Is Nothing Then
					If FeedbackDisplay2_Mask.Status = ebStatusArmed Then
						If FeedbackDisplay2_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							FeedbackDisplay2_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If practiceresponse.ACC = 1 Then
		'Set the ActiveState to Correct
		FeedbackDisplay2.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		FeedbackDisplay2.AccStats.AddObservation practiceresponse.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(practiceresponse.RESP) > 0 Then
			FeedbackDisplay2.RTStats.AddObservation practiceresponse.RT
			FeedbackDisplay2.CorrectRTStats.AddObservation practiceresponse.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(practiceresponse.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			FeedbackDisplay2.ActiveState = "Incorrect"

			'Set the accuracy stats
			FeedbackDisplay2.AccStats.AddObservation practiceresponse.Acc

			'Set the RT stats
			FeedbackDisplay2.RTStats.AddObservation practiceresponse.RT
			FeedbackDisplay2.IncorrectRTStats.AddObservation practiceresponse.RT
		Else
			'Set the ActiveState to NoResponse
			FeedbackDisplay2.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If FeedbackDisplay2.CollectNoRespACCStats = True Then
				FeedbackDisplay2.AccStats.AddObservation practiceresponse.Acc
			End If
		End If
	End If


	Select Case FeedbackDisplay2.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set FeedbackDisplay2_SlideText = CSlideText(FeedbackDisplay2.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			FeedbackDisplay2_SlideText.Text = "You " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set FeedbackDisplay2_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set FeedbackDisplay2_SlideText = CSlideText(FeedbackDisplay2.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			FeedbackDisplay2_SlideText.Text = "You chose the certain option of " &_
				c.GetAttrib("Certain")
			Set FeedbackDisplay2_SlideText = Nothing

	End Select



	FeedbackDisplay2.Run



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	ITIPrac.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	PracticeMixed_theCollection.RemoveAll
	For PracticeMixed_nObject = 1 To PracticeMixed.ChildObjectCount
		Set PracticeMixed_theInputObject = CRteRunnableInputObject(Rte.GetObject(PracticeMixed.GetChildObjectName(PracticeMixed_nObject)))
		If Not PracticeMixed_theInputObject Is Nothing Then PracticeMixed_theCollection.Add PracticeMixed_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		PracticeMixed_bCanExit = True
		For PracticeMixed_nObject = 1 To PracticeMixed_theCollection.Count
			Set PracticeMixed_theInputObject = CRteRunnableInputObject(PracticeMixed_theCollection(PracticeMixed_nObject))
			If Not PracticeMixed_theInputObject Is Nothing Then
				If PracticeMixed_theInputObject.InputMasks.IsPending() Then
					PracticeMixed_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If PracticeMixed_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	PracticeMixed_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	practiceoptions.EndOfProcedure

	practiceresponse.EndOfProcedure

	ISI.EndOfProcedure

	FeedbackDisplay2.EndOfProcedure

	ITIPrac.EndOfProcedure

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub PracticeGain_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		practiceoptions3.ResetLoggingProperties
		practiceresponse3.ResetLoggingProperties
		ISI.ResetLoggingProperties
		ITIPrac.ResetLoggingProperties
		Select Case practiceoptions3.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set practiceoptions3_SlideText = CSlideText(practiceoptions3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			practiceoptions3_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set practiceoptions3_SlideText = Nothing

			'Text2
			Set practiceoptions3_SlideText = CSlideText(practiceoptions3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			practiceoptions3_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set practiceoptions3_SlideText = Nothing

			'Text1
			Set practiceoptions3_SlideText = CSlideText(practiceoptions3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			practiceoptions3_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set practiceoptions3_SlideText = Nothing

	End Select

		Select Case practiceresponse3.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text3
			Set practiceresponse3_SlideText = CSlideText(practiceresponse3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_3))
			practiceresponse3_SlideText.Text = c.GetAttrib(ebUCase_C & ebLCase_e & ebLCase_r & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n)
			Set practiceresponse3_SlideText = Nothing

			'Text2
			Set practiceresponse3_SlideText = CSlideText(practiceresponse3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_2))
			practiceresponse3_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_2)
			Set practiceresponse3_SlideText = Nothing

			'Text1
			Set practiceresponse3_SlideText = CSlideText(practiceresponse3.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			practiceresponse3_SlideText.Text = c.GetAttrib(ebUCase_A & ebLCase_m & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebDigit_1)
			Set practiceresponse3_SlideText = Nothing

	End Select




	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	practiceoptions3.Run



	practiceresponse3.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		practiceresponse3EchoClients.RemoveAll
		practiceresponse3.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2, ebDigit_1, CLng(practiceresponse3.Duration), CLng(ebDigit_1), ebEndResponseActionNone, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	practiceresponse3.Run


	ISI.Run
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing the input object pending any input masks.
	' To prevent this code from being generated, set the Feedback object's
	'.ProcessInputObjectPendingInputMasks property to No/False.
	'
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		'Input Masks still pending?
		If Not practiceresponse3.InputMasks.IsPending() Then
			Exit Do
		End If

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop
	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'Determine if there are any InputMasks with a ebTimeLimitUntilFeedback set
	For FeedbackDisplay4_ChildIterator = 1 To PracticeGain.ChildObjectCount
		Set FeedbackDisplay4_Child = CRteRunnableInputObject(Rte.GetObject(PracticeGain.GetChildObjectName(FeedbackDisplay4_ChildIterator)))
		If Not FeedbackDisplay4_Child Is Nothing Then

			'Have we reached this FeedbackDisplay?
			'(we do not terminate InputMask with ebTimeLimitUntilFeedback
			'  that occur after our FeedbackDisplay)
			If FeedbackDisplay4_Child.Name = FeedbackDisplay4.Name Then Exit For

			'Enumerate through each object and then through each InputMask
			'terminate any input masks that have ebTimeLimitUntilFeeback set
			For FeedbackDisplay4_MaskIterator = 1 To FeedbackDisplay4_Child.InputMasks.Count
				Set FeedbackDisplay4_Mask = FeedbackDisplay4_Child.InputMasks(FeedbackDisplay4_MaskIterator)
				If Not FeedbackDisplay4_Mask Is Nothing Then
					If FeedbackDisplay4_Mask.Status = ebStatusArmed Then
						If FeedbackDisplay4_Mask.TimeLimit = ebTimeLimitUntilFeedback Then
							FeedbackDisplay4_Mask.Terminate
						End If
					End If
				End If
			Next
		End If
	Next

	If practiceresponse3.ACC = 1 Then
		'Set the ActiveState to Correct
		FeedbackDisplay4.ActiveState = "Correct"

		'Add an observation to the accuracy stats
		FeedbackDisplay4.AccStats.AddObservation practiceresponse3.Acc

		'Add an observation to the response time stats
		' unless the user did not respond and the author
		' does not want us to add the no response RT
		If Len(practiceresponse3.RESP) > 0 Then
			FeedbackDisplay4.RTStats.AddObservation practiceresponse3.RT
			FeedbackDisplay4.CorrectRTStats.AddObservation practiceresponse3.RT
		End If
	Else
		'Is it incorrect or no response?
		If Len(practiceresponse3.RESP) > 0 Then
			'Set the ActiveState to Incorrect
			FeedbackDisplay4.ActiveState = "Incorrect"

			'Set the accuracy stats
			FeedbackDisplay4.AccStats.AddObservation practiceresponse3.Acc

			'Set the RT stats
			FeedbackDisplay4.RTStats.AddObservation practiceresponse3.RT
			FeedbackDisplay4.IncorrectRTStats.AddObservation practiceresponse3.RT
		Else
			'Set the ActiveState to NoResponse
			FeedbackDisplay4.ActiveState = "NoResponse"

			'Does the author want to consider a NoResponse
			' to sum as an incorrect response in the ACC stats?
			If FeedbackDisplay4.CollectNoRespACCStats = True Then
				FeedbackDisplay4.AccStats.AddObservation practiceresponse3.Acc
			End If
		End If
	End If


	Select Case FeedbackDisplay4.ActiveState
		Case ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set FeedbackDisplay4_SlideText = CSlideText(FeedbackDisplay4.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			FeedbackDisplay4_SlideText.Text = "You " &_
				c.GetAttrib("GambleOutcome") &_
				" " &_
				c.GetAttrib("GambleAmount")
			Set FeedbackDisplay4_SlideText = Nothing

		Case ebUCase_I & ebLCase_n & ebLCase_c & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t


			'Text1
			Set FeedbackDisplay4_SlideText = CSlideText(FeedbackDisplay4.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1))
			FeedbackDisplay4_SlideText.Text = "You chose the certain option of " &_
				c.GetAttrib("Certain")
			Set FeedbackDisplay4_SlideText = Nothing

	End Select



	FeedbackDisplay4.Run



	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Feedback_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Feedback_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Feedback_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Feedback_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	ITIPrac.Run
	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	PracticeGain_theCollection.RemoveAll
	For PracticeGain_nObject = 1 To PracticeGain.ChildObjectCount
		Set PracticeGain_theInputObject = CRteRunnableInputObject(Rte.GetObject(PracticeGain.GetChildObjectName(PracticeGain_nObject)))
		If Not PracticeGain_theInputObject Is Nothing Then PracticeGain_theCollection.Add PracticeGain_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		PracticeGain_bCanExit = True
		For PracticeGain_nObject = 1 To PracticeGain_theCollection.Count
			Set PracticeGain_theInputObject = CRteRunnableInputObject(PracticeGain_theCollection(PracticeGain_nObject))
			If Not PracticeGain_theInputObject Is Nothing Then
				If PracticeGain_theInputObject.InputMasks.IsPending() Then
					PracticeGain_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If PracticeGain_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	PracticeGain_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	practiceoptions3.EndOfProcedure

	practiceresponse3.EndOfProcedure

	ISI.EndOfProcedure

	FeedbackDisplay4.EndOfProcedure

	ITIPrac.EndOfProcedure

	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetDelay, ISI.OnsetDelay
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetTime, ISI.OnsetTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameDurationError, ISI.DurationError
	c.SetAttrib ISI.Name & ebDot & ebLogNameRTTime, ISI.RTTime
	c.SetAttrib ISI.Name & ebDot & ebLogNameACC, ISI.ACC
	c.SetAttrib ISI.Name & ebDot & ebLogNameRT, ISI.RT
	c.SetAttrib ISI.Name & ebDot & ebLogNameRESP, ISI.RESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameCRESP, ISI.CRESP
	c.SetAttrib ISI.Name & ebDot & ebLogNameOnsetToOnsetTime, ISI.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub













Sub selfratings_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		SelfOutcomes.ResetLoggingProperties
		Select Case SelfOutcomes.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text11
			Set SelfOutcomes_SlideText = CSlideText(SelfOutcomes.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1 & ebDigit_1))
			SelfOutcomes_SlideText.Text = "How did you feel when " &_
				c.GetAttrib("RatingOutcome") &_
				" money for yourself?"
			Set SelfOutcomes_SlideText = Nothing

	End Select


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init BEGIN <Init>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare string variables to hold information about the currently selected box
'and the previously selected box.
Dim intCurrent As Integer, intPrevious As Integer

'Default values.
intCurrent = 4
intCurrent = 4
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

SelectAgain:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume SelectAgainResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

SelectAgainResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	SelfOutcomes.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		SelfOutcomesEchoClients.RemoveAll
		SelfOutcomes.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2 & ebDigit_3, ebEmptyText, CLng(SelfOutcomes.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	SelfOutcomes.Run

	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetDelay, SelfOutcomes.OnsetDelay
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetTime, SelfOutcomes.OnsetTime
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameDurationError, SelfOutcomes.DurationError
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRTTime, SelfOutcomes.RTTime
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameACC, SelfOutcomes.ACC
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRT, SelfOutcomes.RT
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRESP, SelfOutcomes.RESP
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameCRESP, SelfOutcomes.CRESP
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfOutcomes.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - SelfAdjustScale BEGIN <SelfAdjustScale>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare a variable for accessing each SlideText object and changing properties.
Dim theSlideText As SlideText

Dim strName As String

'Was there a response?
If SelfOutcomes.InputMasks.Responses.Count > 0 Then

		If SelfOutcomes.RESP = "3" Then

			'Subject has already selected the highest rating.
			If intCurrent >= 7 Then
			   GoTo SelectAgain

			End If

			'Increment the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent + 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the SelfOutcomes object to collect another response.
			GoTo SelectAgain

	ElseIf SelfOutcomes.RESP = "1" Then

			'Subject has already selected the lowest rating.
			If intCurrent <= 1 Then
				GoTo SelectAgain
			End If

			'Decrement the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent - 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the SelfOutcomes object to collect another response.
			GoTo SelectAgain

		ElseIf SelfOutcomes.RESP = "2" Then

			'Change the BackColor property of the selected box to white to show the subject
			'that the response has been collected.
			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("red")

			'Redraw the Slide to show changes.
			SelfOutcomes.Draw

			'Log rating in the data file under the attribute "Rating"
			c.SetAttrib "Rating", intCurrent

			Sleep 1000

			'Return box to default appearance.
			theSlideText.BackColor = CColor("black")
			theSlideText.BorderColor = CColor("black")

			strName = "Text4"
			Set theSlideText = CSlideText(SelfOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")


		End If

'The subject did not respond.
Else
	c.SetAttrib "Rating", "nothing"

End If

Set theSlideText = Nothing
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - SelfAdjustScale END
	'''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	selfratings_theCollection.RemoveAll
	For selfratings_nObject = 1 To selfratings.ChildObjectCount
		Set selfratings_theInputObject = CRteRunnableInputObject(Rte.GetObject(selfratings.GetChildObjectName(selfratings_nObject)))
		If Not selfratings_theInputObject Is Nothing Then selfratings_theCollection.Add selfratings_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		selfratings_bCanExit = True
		For selfratings_nObject = 1 To selfratings_theCollection.Count
			Set selfratings_theInputObject = CRteRunnableInputObject(selfratings_theCollection(selfratings_nObject))
			If Not selfratings_theInputObject Is Nothing Then
				If selfratings_theInputObject.InputMasks.IsPending() Then
					selfratings_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If selfratings_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	selfratings_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SelfOutcomes.EndOfProcedure

	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetDelay, SelfOutcomes.OnsetDelay
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetTime, SelfOutcomes.OnsetTime
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameDurationError, SelfOutcomes.DurationError
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRTTime, SelfOutcomes.RTTime
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameACC, SelfOutcomes.ACC
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRT, SelfOutcomes.RT
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameRESP, SelfOutcomes.RESP
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameCRESP, SelfOutcomes.CRESP
	c.SetAttrib SelfOutcomes.Name & ebDot & ebLogNameOnsetToOnsetTime, SelfOutcomes.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub otherratings_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		OtherOutcomes.ResetLoggingProperties
		Select Case OtherOutcomes.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text8
			Set OtherOutcomes_SlideText = CSlideText(OtherOutcomes.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_8))
			OtherOutcomes_SlideText.Text = "How did you feel when " &_
				c.GetAttrib("RatingOutcome") &_
				" money for " &_
				c.GetAttrib("PartnerName") &_
				"?"
			Set OtherOutcomes_SlideText = Nothing

	End Select


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init BEGIN <Init>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare string variables to hold information about the currently selected box
'and the previously selected box.
Dim intCurrent As Integer, intPrevious As Integer

'Default values.
intCurrent = 4
intCurrent = 4
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

SelectAgain:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume SelectAgainResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

SelectAgainResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	OtherOutcomes.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		OtherOutcomesEchoClients.RemoveAll
		OtherOutcomes.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2 & ebDigit_3, ebEmptyText, CLng(OtherOutcomes.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	OtherOutcomes.Run


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - OtherAdjustScale BEGIN <OtherAdjustScale>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare a variable for accessing each SlideText object and changing properties.
Dim theSlideText As SlideText

Dim strName As String

'Was there a response?
If OtherOutcomes.InputMasks.Responses.Count > 0 Then

		If OtherOutcomes.RESP = "3" Then

			'Subject has already selected the highest rating.
			If intCurrent >= 7 Then
			   GoTo SelectAgain

			End If

			'Increment the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent + 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the OtherOutcomes object to collect another response.
			GoTo SelectAgain

	ElseIf OtherOutcomes.RESP = "1" Then

			'Subject has already selected the lowest rating.
			If intCurrent <= 1 Then
				GoTo SelectAgain
			End If

			'Decrement the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent - 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the OtherOutcomes object to collect another response.
			GoTo SelectAgain

		ElseIf OtherOutcomes.RESP = "2" Then

			'Change the BackColor property of the selected box to white to show the subject
			'that the response has been collected.
			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("red")

			'Redraw the Slide to show changes.
			OtherOutcomes.Draw

			'Log rating in the data file under the attribute "Rating"
			c.SetAttrib "Rating", intCurrent

			Sleep 1000

			'Return box to default appearance.
			theSlideText.BackColor = CColor("black")
			theSlideText.BorderColor = CColor("black")

			strName = "Text4"
			Set theSlideText = CSlideText(OtherOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")


		End If

'The subject did not respond.
Else
	c.SetAttrib "Rating", "nothing"

End If

Set theSlideText = Nothing
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - OtherAdjustScale END
	'''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	otherratings_theCollection.RemoveAll
	For otherratings_nObject = 1 To otherratings.ChildObjectCount
		Set otherratings_theInputObject = CRteRunnableInputObject(Rte.GetObject(otherratings.GetChildObjectName(otherratings_nObject)))
		If Not otherratings_theInputObject Is Nothing Then otherratings_theCollection.Add otherratings_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		otherratings_bCanExit = True
		For otherratings_nObject = 1 To otherratings_theCollection.Count
			Set otherratings_theInputObject = CRteRunnableInputObject(otherratings_theCollection(otherratings_nObject))
			If Not otherratings_theInputObject Is Nothing Then
				If otherratings_theInputObject.InputMasks.IsPending() Then
					otherratings_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If otherratings_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	otherratings_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	OtherOutcomes.EndOfProcedure


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub

Sub sharedratings_Run(c as Context)

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		SharedOutcomes.ResetLoggingProperties
		Select Case SharedOutcomes.ActiveState
		Case ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t


			'Text12
			Set SharedOutcomes_SlideText = CSlideText(SharedOutcomes.ActiveSlideState.Objects(ebUCase_T & ebLCase_e & ebLCase_x & ebLCase_t & ebDigit_1 & ebDigit_2))
			SharedOutcomes_SlideText.Text = "How did you feel when sharing " &_
				c.GetAttrib("RatingOutcome") &_
				" with " &_
				c.GetAttrib("PartnerName") &_
				"?"
			Set SharedOutcomes_SlideText = Nothing

	End Select


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Start:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_StartResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_StartResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Start END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init BEGIN <Init>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare string variables to hold information about the currently selected box
'and the previously selected box.
Dim intCurrent As Integer, intPrevious As Integer

'Default values.
intCurrent = 4
intCurrent = 4
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - Init END
	'''''''''''''''''''''''''''''''''''''''''''''


	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

SelectAgain:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume SelectAgainResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

SelectAgainResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - SelectAgain END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



	SharedOutcomes.InputMasks.Reset

	If Keyboard.GetState() = ebStateOpen Then
		SharedOutcomesEchoClients.RemoveAll
		SharedOutcomes.InputMasks.Add Keyboard.CreateInputMask(ebDigit_1 & ebDigit_2 & ebDigit_3, ebEmptyText, CLng(SharedOutcomes.Duration), CLng(ebDigit_1), ebEndResponseActionTerminate, CLogical(ebUCase_Y & ebLCase_e & ebLCase_s), ebEmptyText, ebEmptyText, "AutoResponseEnabled:Yes ResponseMode:All ProcessBackspace:Yes")


	End If

	SharedOutcomes.Run

	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetDelay, SharedOutcomes.OnsetDelay
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetTime, SharedOutcomes.OnsetTime
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameDurationError, SharedOutcomes.DurationError
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRTTime, SharedOutcomes.RTTime
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameACC, SharedOutcomes.ACC
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRT, SharedOutcomes.RT
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRESP, SharedOutcomes.RESP
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameCRESP, SharedOutcomes.CRESP
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetToOnsetTime, SharedOutcomes.OnsetToOnsetTime


	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - SharedAdjustScale BEGIN <SharedAdjustScale>
	'''''''''''''''''''''''''''''''''''''''''''''
	'Declare a variable for accessing each SlideText object and changing properties.
Dim theSlideText As SlideText

Dim strName As String

'Was there a response?
If SharedOutcomes.InputMasks.Responses.Count > 0 Then

		If SharedOutcomes.RESP = "3" Then

			'Subject has already selected the highest rating.
			If intCurrent >= 7 Then
			   GoTo SelectAgain

			End If

			'Increment the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent + 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the SharedOutcomes object to collect another response.
			GoTo SelectAgain

	ElseIf SharedOutcomes.RESP = "1" Then

			'Subject has already selected the lowest rating.
			If intCurrent <= 1 Then
				GoTo SelectAgain
			End If

			'Decrement the current selection.
			intPrevious = intCurrent
			intCurrent = intCurrent - 1

			'Change border color of previously selected box back to black, change border
			'color of currently selected box to white.
			strName = "Text" & intPrevious
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("black")

			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")

			'Return to the SharedOutcomes object to collect another response.
			GoTo SelectAgain

		ElseIf SharedOutcomes.RESP = "2" Then

			'Change the BackColor property of the selected box to white to show the subject
			'that the response has been collected.
			strName = "Text" & intCurrent
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("red")

			'Redraw the Slide to show changes.
			SharedOutcomes.Draw

			'Log rating in the data file under the attribute "Rating"
			c.SetAttrib "Rating", intCurrent

			Sleep 1000

			'Return box to default appearance.
			theSlideText.BackColor = CColor("black")
			theSlideText.BorderColor = CColor("black")

			strName = "Text4"
			Set theSlideText = CSlideText(SharedOutcomes.States.Item("Default").Objects(strName))
			theSlideText.BorderColor = CColor("white")


		End If

'The subject did not respond.
Else
	c.SetAttrib "Rating", "nothing"

End If

Set theSlideText = Nothing
	'''''''''''''''''''''''''''''''''''''''''''''
	' InLine - SharedAdjustScale END
	'''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''
	'End Of Procedure Clean-Up
	'''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Timeline_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_Timeline_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_Timeline_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Timeline_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' We are processing any pending input masks.
	' To prevent this code from being generated, set the Procedure object's
	'.ProcessPendingInputMasks property to None.
	'

	' Enum through the items on the Procedure and
	'  and determine if they are RteRunnableInputObject
	sharedratings_theCollection.RemoveAll
	For sharedratings_nObject = 1 To sharedratings.ChildObjectCount
		Set sharedratings_theInputObject = CRteRunnableInputObject(Rte.GetObject(sharedratings.GetChildObjectName(sharedratings_nObject)))
		If Not sharedratings_theInputObject Is Nothing Then sharedratings_theCollection.Add sharedratings_theInputObject
	Next

	' Loop until a condition allows us to complete this Procedure
	Do
		'Any requests for termination?
		If GetTerminateMode() = ebTerminate Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Exit Do
		ElseIf GetTerminateMode() = ebTerminateJump Then
			SetTerminateMode ebTerminateNone
			SetNextTargetOnsetTime Clock.Read
			Err.Raise ebInputAccepted
		End If

		' Any input mask on this procedure have pending input masks?
		sharedratings_bCanExit = True
		For sharedratings_nObject = 1 To sharedratings_theCollection.Count
			Set sharedratings_theInputObject = CRteRunnableInputObject(sharedratings_theCollection(sharedratings_nObject))
			If Not sharedratings_theInputObject Is Nothing Then
				If sharedratings_theInputObject.InputMasks.IsPending() Then
					sharedratings_bCanExit = False
					Exit For
				End If
			End If
		Next

		' No input masks
		If sharedratings_bCanExit Then Exit Do

		'Ready for the next object?
		If Clock.Read >= GetNextTargetOnsetTime() Then
			Exit Do
		End If

		'Conditional Exit?
		If GetConditionalExitState() <> 0 Then
			Exit Do
		End If

		If GetNextTargetOnsetTime() - Clock.Read > 4 Then Sleep 4
		DoEvents
	Loop

	' Cleanup
	sharedratings_theCollection.RemoveAll

	'
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	SharedOutcomes.EndOfProcedure

	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetDelay, SharedOutcomes.OnsetDelay
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetTime, SharedOutcomes.OnsetTime
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameDurationError, SharedOutcomes.DurationError
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRTTime, SharedOutcomes.RTTime
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameACC, SharedOutcomes.ACC
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRT, SharedOutcomes.RT
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameRESP, SharedOutcomes.RESP
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameCRESP, SharedOutcomes.CRESP
	c.SetAttrib SharedOutcomes.Name & ebDot & ebLogNameOnsetToOnsetTime, SharedOutcomes.OnsetToOnsetTime


	c.Log

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish BEGIN
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Procedure_Finish:
	If Err.Number = ebInputAccepted Then
		Err.Clear
		Resume Procedure_FinishResume
	ElseIf Err.Number <> 0 Then
		'NOTE: If you receive a runtime error here, it
		' is because a runtime error other than ebInputAccepted
		' was thrown (ebInputAccepted for catching input masks that jump).
		'You are encouraged to either handle the error so that
		' it is not thrown in the future or will have to set up
		' your own error handler, which will also need to take
		' into account for any input masks that jump.
		'
		'Raise the error so the default error handler will show the message
		Err.Raise Err.Number, Err.Source, Err.Description
	End If

Procedure_FinishResume:

	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'	Label - Procedure_Finish END
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

End Sub









'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)


	Set Display = New DisplayDevice
	Display.Name = ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y

	Dim DisplayDisplayDeviceInfo As DisplayDeviceInfo
	DisplayDisplayDeviceInfo.XRes = 1920
	DisplayDisplayDeviceInfo.YRes = 1080
	DisplayDisplayDeviceInfo.ColorDepth = 32
	DisplayDisplayDeviceInfo.DisplayIndex = 1
	DisplayDisplayDeviceInfo.UseDesktopSettings = False
	DisplayDisplayDeviceInfo.DefaultColor = Color.Black
	DisplayDisplayDeviceInfo.RefreshRateRequested = 0
	DisplayDisplayDeviceInfo.NumPages = 0

	'Load values from context if they exist
	If c.AttribExists(Display.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s) Then DisplayDisplayDeviceInfo.XRes = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_X & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(Display.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s) Then DisplayDisplayDeviceInfo.YRes = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_Y & ebUCase_R & ebLCase_e & ebLCase_s))
	If c.AttribExists(Display.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h) Then DisplayDisplayDeviceInfo.ColorDepth = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r & ebUCase_D & ebLCase_e & ebLCase_p & ebLCase_t & ebLCase_h))
	If c.AttribExists(Display.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then DisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(Display.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then DisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(Display.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(Display.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d) Then DisplayDisplayDeviceInfo.RefreshRateRequested = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_d))
	If c.AttribExists(Display.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s) Then DisplayDisplayDeviceInfo.NumPages = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_P & ebLCase_a & ebLCase_g & ebLCase_e & ebLCase_s))
	If c.AttribExists(Display.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s) Then DisplayDisplayDeviceInfo.UseDesktopSettings = CLogical(c.GetAttrib(Display.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_s & ebLCase_k & ebLCase_t & ebLCase_o & ebLCase_p & ebUCase_S & ebLCase_e & ebLCase_t & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s))

	'Open the device, unless the context values indicate otherwise
	Dim DisplayOpen As Boolean
	DisplayOpen = True
	If c.AttribExists(Display.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then DisplayOpen = CLogical(c.GetAttrib(Display.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If DisplayOpen = True Then
		Display.Open DisplayDisplayDeviceInfo
		Display.RefreshAlignment = ebDigit_2 & ebDigit_5 & ebPercent
		If c.AttribExists(Display.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Display.RefreshAlignment = c.GetAttrib(Display.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_A & ebLCase_l & ebLCase_i & ebLCase_g & ebLCase_n & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t)
	#If RUNTIME_VERSION_PERSIST >= 201 Then
		Display.RTAdjustment = 0
		If c.AttribExists(Display.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Display.RTAdjustment = CLng(c.GetAttrib(Display.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
End If

	'Enable flipping, if requested
	If c.AttribExists(Display.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d) Then
		Display.FlippingEnabled = CLogical(c.GetAttrib(Display.Name & ebDot & ebUCase_F & ebLCase_l & ebLCase_i & ebLCase_p & ebLCase_p & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d))
	Else
		Display.FlippingEnabled = True
	End If

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = ebUCase_K & ebLCase_e & ebLCase_y & ebLCase_b & ebLCase_o & ebLCase_a & ebLCase_r & ebLCase_d


	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	'Load values from context if they exist
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then KeyboardKeyboardDeviceInfo.CollectionMode = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.CapsLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_a & ebLCase_p & ebLCase_s & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k) Then KeyboardKeyboardDeviceInfo.NumLock = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_N & ebLCase_u & ebLCase_m & ebUCase_L & ebLCase_o & ebLCase_c & ebLCase_k))
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then KeyboardKeyboardDeviceInfo.EmulateDeviceName = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)

	'Open the device, unless the context values indicate otherwise
	Dim KeyboardOpen As Boolean
	KeyboardOpen = True
	If c.AttribExists(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then KeyboardOpen = CLogical(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If KeyboardOpen = True Then
		Keyboard.Open KeyboardKeyboardDeviceInfo
#If RUNTIME_VERSION_PERSIST >= 201 Then
		Keyboard.RTAdjustment = 0
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Keyboard.RTAdjustment = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If

		Keyboard.AutoResponseEnabled = True
		Keyboard.AutoResponseTimeLimitLowerBound = ebDigit_2 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseTimeLimitUpperBound = ebDigit_7 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseTimeLimitWhenInfinite = 1000
		Keyboard.AutoResponseCorrectProbability = ebDigit_8 & ebDigit_0 & ebPercent
		Keyboard.AutoResponseAllowableOverride = ebEmptyText
		Keyboard.AutoResponseMaxCountLowerBound = ebDigit_2 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseMaxCountUpperBound = ebDigit_7 & ebDigit_5 & ebPercent
		Keyboard.AutoResponseDelayBetweenResponses = 30
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d) Then Keyboard.AutoResponseEnabled = CLogical(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_E & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebLCase_d))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseTimeLimitLowerBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseTimeLimitUpperBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_W & ebLCase_h & ebLCase_e & ebLCase_n & ebUCase_I & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_n & ebLCase_i & ebLCase_t & ebLCase_e) Then Keyboard.AutoResponseTimeLimitWhenInfinite = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_T & ebLCase_i & ebLCase_m & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_m & ebLCase_i & ebLCase_t & ebUCase_W & ebLCase_h & ebLCase_e & ebLCase_n & ebUCase_I & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_n & ebLCase_i & ebLCase_t & ebLCase_e))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_b & ebLCase_a & ebLCase_b & ebLCase_i & ebLCase_l & ebLCase_i & ebLCase_t & ebLCase_y) Then Keyboard.AutoResponseCorrectProbability = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_C & ebLCase_o & ebLCase_r & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_t & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_b & ebLCase_a & ebLCase_b & ebLCase_i & ebLCase_l & ebLCase_i & ebLCase_t & ebLCase_y)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_A & ebLCase_l & ebLCase_l & ebLCase_o & ebLCase_w & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_O & ebLCase_v & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_i & ebLCase_d & ebLCase_e) Then Keyboard.AutoResponseAllowableOverride = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_A & ebLCase_l & ebLCase_l & ebLCase_o & ebLCase_w & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebUCase_O & ebLCase_v & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_i & ebLCase_d & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseMaxCountLowerBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_L & ebLCase_o & ebLCase_w & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d) Then Keyboard.AutoResponseMaxCountUpperBound = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_C & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_t & ebUCase_U & ebLCase_p & ebLCase_p & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_B & ebLCase_e & ebLCase_t & ebLCase_w & ebLCase_e & ebLCase_e & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebLCase_s) Then Keyboard.AutoResponseDelayBetweenResponses = CLng(c.GetAttrib(Keyboard.Name & ebDot & ebUCase_A & ebLCase_u & ebLCase_t & ebLCase_o & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_B & ebLCase_e & ebLCase_t & ebLCase_w & ebLCase_e & ebLCase_e & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebLCase_s))
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.SystemAbortWatchSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.ConditionalExitSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Keyboard.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Keyboard.UserBreakSequence = c.GetAttrib(Keyboard.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)

	End If

	Set Mouse = New MouseDevice
	Mouse.Name = ebUCase_M & ebLCase_o & ebLCase_u & ebLCase_s & ebLCase_e


	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	'Load values from context if they exist
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.OpenMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e) Then MouseMouseDeviceInfo.CollectionMode = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_M & ebLCase_o & ebLCase_d & ebLCase_e))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r) Then MouseMouseDeviceInfo.ShowCursor = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_h & ebLCase_o & ebLCase_w & ebUCase_C & ebLCase_u & ebLCase_r & ebLCase_s & ebLCase_o & ebLCase_r))
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e) Then MouseMouseDeviceInfo.EmulateDeviceName = c.GetAttrib(Mouse.Name & ebDot & ebUCase_E & ebLCase_m & ebLCase_u & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_N & ebLCase_a & ebLCase_m & ebLCase_e)

	'Open the device, unless the context values indicate otherwise
	Dim MouseOpen As Boolean
	MouseOpen = True
	If c.AttribExists(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then MouseOpen = CLogical(c.GetAttrib(Mouse.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If MouseOpen = True Then
		Mouse.Open MouseMouseDeviceInfo
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.SystemAbortWatchSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_S & ebLCase_y & ebLCase_s & ebLCase_t & ebLCase_e & ebLCase_m & ebUCase_A & ebLCase_b & ebLCase_o & ebLCase_r & ebLCase_t & ebUCase_W & ebLCase_a & ebLCase_t & ebLCase_c & ebLCase_h & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.ConditionalExitSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_C & ebLCase_o & ebLCase_n & ebLCase_d & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l & ebUCase_E & ebLCase_x & ebLCase_i & ebLCase_t & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e) Then Mouse.UserBreakSequence = c.GetAttrib(Mouse.Name & ebDot & ebUCase_U & ebLCase_s & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_r & ebLCase_e & ebLCase_a & ebLCase_k & ebUCase_S & ebLCase_e & ebLCase_q & ebLCase_u & ebLCase_e & ebLCase_n & ebLCase_c & ebLCase_e)
	#If RUNTIME_VERSION_PERSIST >= 201 Then
		Mouse.RTAdjustment = 0
		If c.AttribExists(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Mouse.RTAdjustment = CLng(c.GetAttrib(Mouse.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If

	End If

	Set Sound = New SoundDevice
	Sound.Name = ebUCase_S & ebLCase_o & ebLCase_u & ebLCase_n & ebLCase_d

	Dim SoundSoundDeviceInfo As SoundDeviceInfo
	SoundSoundDeviceInfo.API = ebSoundApiDirectSound
	SoundSoundDeviceInfo.DeviceIndex = 1
	SoundSoundDeviceInfo.Channels = 0
	SoundSoundDeviceInfo.SamplesPerSecond = 0
	SoundSoundDeviceInfo.BitsPerSample = 0
	SoundSoundDeviceInfo.DeviceReserved1 = 0
	SoundSoundDeviceInfo.DeviceReserved2 = 0
	SoundSoundDeviceInfo.DeviceReserved3 = 0
	SoundSoundDeviceInfo.DeviceReserved4 = 0
	SoundSoundDeviceInfo.DeviceReservedA = ebEmptyText
	SoundSoundDeviceInfo.DeviceReservedB = ebEmptyText
	SoundSoundDeviceInfo.DeviceReservedC = ebEmptyText
	SoundSoundDeviceInfo.DeviceReservedD = ebEmptyText

	'Load values from context if they exist
	If c.AttribExists(Sound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I) Then SoundSoundDeviceInfo.API = c.GetAttrib(Sound.Name & ebDot & ebUCase_A & ebUCase_P & ebUCase_I)
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then SoundSoundDeviceInfo.DeviceIndex = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s) Then SoundSoundDeviceInfo.Channels = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_C & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_e & ebLCase_l & ebLCase_s))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d) Then SoundSoundDeviceInfo.SamplesPerSecond = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_e & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_d))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e) Then SoundSoundDeviceInfo.BitsPerSample = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_B & ebLCase_i & ebLCase_t & ebLCase_s & ebUCase_P & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_a & ebLCase_m & ebLCase_p & ebLCase_l & ebLCase_e))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1) Then SoundSoundDeviceInfo.DeviceReserved1 = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_1))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2) Then SoundSoundDeviceInfo.DeviceReserved2 = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_2))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3) Then SoundSoundDeviceInfo.DeviceReserved3 = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_3))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4) Then SoundSoundDeviceInfo.DeviceReserved4 = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebDigit_4))
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A) Then SoundSoundDeviceInfo.DeviceReservedA = c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_A)
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B) Then SoundSoundDeviceInfo.DeviceReservedB = c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_B)
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C) Then SoundSoundDeviceInfo.DeviceReservedC = c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_C)
	If c.AttribExists(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D) Then SoundSoundDeviceInfo.DeviceReservedD = c.GetAttrib(Sound.Name & ebDot & ebUCase_D & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_e & ebLCase_r & ebLCase_v & ebLCase_e & ebLCase_d & ebUCase_D)

	'Open the device, unless the context values indicate otherwise
	Dim SoundOpen As Boolean
	SoundOpen = True
	If c.AttribExists(Sound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n) Then SoundOpen = CLogical(c.GetAttrib(Sound.Name & ebDot & ebUCase_O & ebLCase_p & ebLCase_e & ebLCase_n))
	If SoundOpen = True Then
		Sound.Open SoundSoundDeviceInfo
#If RUNTIME_VERSION_PERSIST >= 201 Then
		Sound.RTAdjustment = 0
		If c.AttribExists(Sound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then Sound.RTAdjustment = CLng(c.GetAttrib(Sound.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
	End If

	Set ParallelPort = New ParallelPortDevice
	ParallelPort.Name = "ParallelPort"
	Dim ParallelPortParallelPortDeviceInfo As ParallelPortDeviceInfo
	ParallelPortParallelPortDeviceInfo.CollectionMode = ebPressesOnly
	ParallelPortParallelPortDeviceInfo.LPT = 3
	ParallelPortParallelPortDeviceInfo.Invert = CLogical("No")
	ParallelPortParallelPortDeviceInfo.Mask = -1
	ParallelPortParallelPortDeviceInfo.DataPort = 0
	ParallelPortParallelPortDeviceInfo.Debounce = 0
	'Load values from context if they exist
	If c.AttribExists(ParallelPort.Name & ".CollectionMode") Then ParallelPortParallelPortDeviceInfo.CollectionMode = c.GetAttrib(ParallelPort.Name & ".CollectionMode")
	If c.AttribExists(ParallelPort.Name & ".LPT") Then ParallelPortParallelPortDeviceInfo.LPT = CLng(c.GetAttrib(ParallelPort.Name & ".LPT"))
	If c.AttribExists(ParallelPort.Name & ".Invert") Then ParallelPortParallelPortDeviceInfo.Invert = c.GetAttrib(ParallelPort.Name & ".Invert")
	If c.AttribExists(ParallelPort.Name & ".Mask") Then ParallelPortParallelPortDeviceInfo.Mask = c.GetAttrib(ParallelPort.Name & ".Mask")
	If c.AttribExists(ParallelPort.Name & ".DataPort") Then ParallelPortParallelPortDeviceInfo.DataPort = CLng(c.GetAttrib(ParallelPort.Name & ".DataPort"))
	If c.AttribExists(ParallelPort.Name & ".Debounce") Then ParallelPortParallelPortDeviceInfo.Debounce = CLng(c.GetAttrib(ParallelPort.Name & ".Debounce"))
	If c.AttribExists(ParallelPort.Name & ".EmulateDeviceName") Then ParallelPortParallelPortDeviceInfo.EmulateDeviceName = c.GetAttrib(ParallelPort.Name & ".EmulateDeviceName")

	'Open the device, unless the context values indicate otherwise
	Dim ParallelPortOpen As Boolean
	ParallelPortOpen = True
	If c.AttribExists(ParallelPort.Name & ".Open") Then ParallelPortOpen = CLogical(c.GetAttrib(ParallelPort.Name & ".Open"))
	If ParallelPortOpen = True Then
		ParallelPort.Open ParallelPortParallelPortDeviceInfo

		'Set parallel port IO mode
		ParallelPort.ConfigurePortForOutput
#If RUNTIME_VERSION_PERSIST >= 201 Then
		ParallelPort.RTAdjustment = 0
		If c.AttribExists(ParallelPort.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t) Then ParallelPort.RTAdjustment = CLng(c.GetAttrib(ParallelPort.Name & ebDot & ebUCase_R & ebUCase_T & ebUCase_A & ebLCase_d & ebLCase_j & ebLCase_u & ebLCase_s & ebLCase_t & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t))
	#End If
	End If

	'Init All Devices
	Rte.DeviceManager.Init

	' Log DisplayDevice(s) Refresh Rates
	If DisplayOpen = True Then
		c.SetAttrib Display.Name & ebDot & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, Format$(Display.CalculatedRefreshRate, ebDigit_0 & ebDot & ebDigit_0 & ebDigit_0 & ebDigit_0)

		'Ensure that the refresh rate is acceptable
		If CLng(Display.CalculatedRefreshRate) = 0 Then
			'WARNING: RefreshRate of 0 (Zero) Detected.  Experiment will assume 60hz to continue. Data collection should NOT be used for time critical analysis.  Please ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista or later is not compatible)
			Dim strDisplayError As String
			strDisplayError = ebUCase_W & ebUCase_A & ebUCase_R & ebUCase_N & ebUCase_I & ebUCase_N & ebUCase_G & ebColon & ebSpace & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e & ebSpace & ebLCase_o & ebLCase_f & ebSpace & ebDigit_0 & ebSpace & ebParenOpen & ebUCase_Z & ebLCase_e & ebLCase_r & ebLCase_o & ebParenClose & ebSpace & ebUCase_D & ebLCase_e & ebLCase_t & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_e & ebLCase_d & ebDot & ebSpace & ebSpace & ebUCase_E & ebLCase_x & ebLCase_p & ebLCase_e & ebLCase_r & ebLCase_i & ebLCase_m & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_w & ebLCase_i & ebLCase_l & ebLCase_l & ebSpace & ebLCase_a & ebLCase_s & ebLCase_s & ebLCase_u & ebLCase_m & ebLCase_e & ebSpace & ebDigit_6 & ebDigit_0 & ebLCase_h & ebLCase_z & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_u & ebLCase_e & ebDot & ebSpace & ebUCase_D & ebLCase_a & ebLCase_t & ebLCase_a & ebSpace & ebLCase_c & ebLCase_o & ebLCase_l & ebLCase_l & ebLCase_e & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_s & ebLCase_h & ebLCase_o & ebLCase_u & ebLCase_l & ebLCase_d & ebSpace & ebUCase_N & ebUCase_O & ebUCase_T & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_u & ebLCase_s & ebLCase_e & ebLCase_d & ebSpace & ebLCase_f & ebLCase_o & ebLCase_r & ebSpace & ebLCase_t & ebLCase_i & ebLCase_m & ebLCase_e & ebSpace & ebLCase_c & ebLCase_r & ebLCase_i & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_a & ebLCase_l & ebSpace & ebLCase_a & ebLCase_n & ebLCase_a & ebLCase_l & ebLCase_y & ebLCase_s & ebLCase_i & ebLCase_s & ebDot & ebSpace & ebSpace & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_o & ebLCase_r & ebSpace & ebLCase_l & ebLCase_a & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
			Debug.Print strDisplayError
			c.SetAttrib ebUCase_A & ebUCase_W & ebLCase_a & ebLCase_r & ebLCase_n & ebLCase_i & ebLCase_n & ebLCase_g & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e, strDisplayError
		End If

		'Determine RefreshRate range
		Dim dblDisplayMinRefreshRate As Double
		Dim dblDisplayMaxRefreshRate As Double
		dblDisplayMinRefreshRate = 39
		dblDisplayMaxRefreshRate = 201
		If c.AttribExists(Display.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblDisplayMinRefreshRate = CDbl(c.GetAttrib(Display.Name & ebDot & ebUCase_M & ebLCase_i & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))
		If c.AttribExists(Display.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e) Then dblDisplayMaxRefreshRate = CDbl(c.GetAttrib(Display.Name & ebDot & ebUCase_M & ebLCase_a & ebLCase_x & ebUCase_R & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_e))

		'Ensure that the refresh rate is within range
		If Display.CalculatedRefreshRate < dblDisplayMinRefreshRate Or Display.CalculatedRefreshRate > dblDisplayMaxRefreshRate Then
			'Unable to obtain a valid refresh rate.\n\nPlease ensure your display adapter is configured with the most recent and device specific driver.\n(Standard Display Adapter under Windows Vista is not compatible)
			Rte.AbortExperiment -999, ebUCase_U & ebLCase_n & ebLCase_a & ebLCase_b & ebLCase_l & ebLCase_e & ebSpace & ebLCase_t & ebLCase_o & ebSpace & ebLCase_o & ebLCase_b & ebLCase_t & ebLCase_a & ebLCase_i & ebLCase_n & ebSpace & ebLCase_a & ebSpace & ebLCase_v & ebLCase_a & ebLCase_l & ebLCase_i & ebLCase_d & ebSpace & ebLCase_r & ebLCase_e & ebLCase_f & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_h & ebSpace & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_e & ebDot & ebLf & ebLf & ebUCase_P & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebSpace & ebLCase_e & ebLCase_n & ebLCase_s & ebLCase_u & ebLCase_r & ebLCase_e & ebSpace & ebLCase_y & ebLCase_o & ebLCase_u & ebLCase_r & ebSpace & ebLCase_d & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebLCase_a & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_c & ebLCase_o & ebLCase_n & ebLCase_f & ebLCase_i & ebLCase_g & ebLCase_u & ebLCase_r & ebLCase_e & ebLCase_d & ebSpace & ebLCase_w & ebLCase_i & ebLCase_t & ebLCase_h & ebSpace & ebLCase_t & ebLCase_h & ebLCase_e & ebSpace & ebLCase_m & ebLCase_o & ebLCase_s & ebLCase_t & ebSpace & ebLCase_r & ebLCase_e & ebLCase_c & ebLCase_e & ebLCase_n & ebLCase_t & ebSpace & ebLCase_a & ebLCase_n & ebLCase_d & ebSpace & ebLCase_d & ebLCase_e & ebLCase_v & ebLCase_i & ebLCase_c & ebLCase_e & ebSpace & ebLCase_s & ebLCase_p & ebLCase_e & ebLCase_c & ebLCase_i & ebLCase_f & ebLCase_i & ebLCase_c & ebSpace & ebLCase_d & ebLCase_r & ebLCase_i & ebLCase_v & ebLCase_e & ebLCase_r & ebDot & ebLf & ebParenOpen & ebUCase_S & ebLCase_t & ebLCase_a & ebLCase_n & ebLCase_d & ebLCase_a & ebLCase_r & ebLCase_d & ebSpace & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebSpace & ebUCase_A & ebLCase_d & ebLCase_a & ebLCase_p & ebLCase_t & ebLCase_e & ebLCase_r & ebSpace & ebLCase_u & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_r & ebSpace & ebUCase_W & ebLCase_i & ebLCase_n & ebLCase_d & ebLCase_o & ebLCase_w & ebLCase_s & ebSpace & ebUCase_V & ebLCase_i & ebLCase_s & ebLCase_t & ebLCase_a & ebSpace & ebLCase_i & ebLCase_s & ebSpace & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_p & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_b & ebLCase_l & ebLCase_e & ebParenClose
		End If
	End If

End Sub



'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	Set SessionProc = New Procedure
	SessionProc.Name = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c
	'{F631E532-3265-4FDC-B80D-AB571BCAF03A}
	SessionProc.Guid = CGuid(&HF631E532, &H3265, &H4FDC, &HB80D, &HAB571BCA, &HF03A)
	SessionProc.Tag = ebEmptyText

	SessionProc.LoadProperties
	SessionProc.Subroutine = ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_c & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set SessionProc_theCollection = New RteCollection

	Set List1 = New List
	List1.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1
	'{F88195A3-8250-4AB7-B7C1-831AB5049E1F}
	List1.Guid = CGuid(&HF88195A3, &H8250, &H4AB7, &HB7C1, &H831AB504, &H9E1F)
	List1.Tag = ebEmptyText

	'Initialization for List1

	Set List1.Order = New SequentialOrder
	Set List1.Deletion = NoDeletion
	List1.ResetEveryRun = False

	List1.LoadProperties

	Set List1.TerminateCondition = Cycles(1)
	Set List1.ResetCondition = Samples(5)
	List1.Reset

	Set Instructions = New Procedure
	Instructions.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s
	'{557A63B5-6795-4B96-97FB-52CB7F9E6CCD}
	Instructions.Guid = CGuid(&H557A63B5, &H6795, &H4B96, &H97FB, &H52CB7F9E, &H6CCD)
	Instructions.Tag = ebEmptyText

	Instructions.LoadProperties
	Instructions.Subroutine = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Instructions_theCollection = New RteCollection

	Set Ratings = New Procedure
	Ratings.Name = ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s
	'{EDF03CC5-2483-4AAE-80A5-B34C58846B44}
	Ratings.Guid = CGuid(&HEDF03CC5, &H2483, &H4AAE, &H80A5, &HB34C5884, &H6B44)
	Ratings.Tag = ebEmptyText

	Ratings.LoadProperties
	Ratings.Subroutine = ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Ratings_theCollection = New RteCollection

	Set SelfTask = New Procedure
	SelfTask.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k
	'{0519D9F1-A35B-4CFA-B1A2-F02A124EBCCC}
	SelfTask.Guid = CGuid(&H0519D9F1, &HA35B, &H4CFA, &HB1A2, &HF02A124E, &HBCCC)
	SelfTask.Tag = ebEmptyText

	SelfTask.LoadProperties
	SelfTask.Subroutine = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set SelfTask_theCollection = New RteCollection

	Set OtherTask = New Procedure
	OtherTask.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k
	'{69EFB6E2-68A4-435E-8A45-DD72B356A82B}
	OtherTask.Guid = CGuid(&H69EFB6E2, &H68A4, &H435E, &H8A45, &HDD72B356, &HA82B)
	OtherTask.Tag = ebEmptyText

	OtherTask.LoadProperties
	OtherTask.Subroutine = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set OtherTask_theCollection = New RteCollection

	Set BothTask = New Procedure
	BothTask.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k
	'{176AE4E6-0801-4841-9D4E-8B4527FC8D4A}
	BothTask.Guid = CGuid(&H176AE4E6, &H0801, &H4841, &H9D4E, &H8B4527FC, &H8D4A)
	BothTask.Tag = ebEmptyText

	BothTask.LoadProperties
	BothTask.Subroutine = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_T & ebLCase_a & ebLCase_s & ebLCase_k & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set BothTask_theCollection = New RteCollection

	Set ITI = New TextDisplay
	ITI.Name = ebUCase_I & ebUCase_T & ebUCase_I
	'{82C5C8E0-8294-4870-A9B9-B475351DA535}
	ITI.Guid = CGuid(&H82C5C8E0, &H8294, &H4870, &HA9B9, &HB475351D, &HA535)
	ITI.Tag = ebEmptyText

	ITI.LoadProperties

	Set Options = New Slide
	Options.Name = ebUCase_O & ebLCase_p & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s
	'{D5C75A87-36B2-4A20-9EDF-56971DF221F6}
	Options.Guid = CGuid(&HD5C75A87, &H36B2, &H4A20, &H9EDF, &H56971DF2, &H21F6)
	Options.Tag = ebEmptyText

	Options.LoadProperties

	Set ISI = New TextDisplay
	ISI.Name = ebUCase_I & ebUCase_S & ebUCase_I
	'{4C1A6969-3190-4C27-8623-2C0B837E2990}
	ISI.Guid = CGuid(&H4C1A6969, &H3190, &H4C27, &H8623, &H2C0B837E, &H2990)
	ISI.Tag = ebEmptyText

	ISI.LoadProperties

	Set Response = New Slide
	Response.Name = ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e
	'{A4A669B1-849E-4A99-8541-FB3B036AC2A5}
	Response.Guid = CGuid(&HA4A669B1, &H849E, &H4A99, &H8541, &HFB3B036A, &HC2A5)
	Response.Tag = ebEmptyText

	Set ResponseEchoClients = New EchoClientCollection

	Response.LoadProperties

	Set BothFB = New FeedbackDisplay
	BothFB.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_F & ebUCase_B
	'{C79537C5-8897-4C1D-8E98-3ABDF2310013}
	BothFB.Guid = CGuid(&HC79537C5, &H8897, &H4C1D, &H8E98, &H3ABDF231, &H0013)
	BothFB.Tag = ebEmptyText

	BothFB.LoadProperties

	Set LASelfMixed = New Procedure
	LASelfMixed.Name = ebUCase_L & ebUCase_A & ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d
	'{E00D25B1-8AFA-4DFF-A32A-E0F249F0E1C0}
	LASelfMixed.Guid = CGuid(&HE00D25B1, &H8AFA, &H4DFF, &HA32A, &HE0F249F0, &HE1C0)
	LASelfMixed.Tag = ebEmptyText

	LASelfMixed.LoadProperties
	LASelfMixed.Subroutine = ebUCase_L & ebUCase_A & ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LASelfMixed_theCollection = New RteCollection

	Set LASelfGain = New Procedure
	LASelfGain.Name = ebUCase_L & ebUCase_A & ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n
	'{726EC35F-973C-43EE-9152-5DFEB9C85620}
	LASelfGain.Guid = CGuid(&H726EC35F, &H973C, &H43EE, &H9152, &H5DFEB9C8, &H5620)
	LASelfGain.Tag = ebEmptyText

	LASelfGain.LoadProperties
	LASelfGain.Subroutine = ebUCase_L & ebUCase_A & ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LASelfGain_theCollection = New RteCollection

	Set List3 = New List
	List3.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_3
	'{D3CF12DC-A78E-40D8-A8D3-3F2334C9ADAA}
	List3.Guid = CGuid(&HD3CF12DC, &HA78E, &H40D8, &HA8D3, &H3F2334C9, &HADAA)
	List3.Tag = ebEmptyText

	'Initialization for List3

	Set List3.Order = New SequentialOrder
	Set List3.Deletion = NoDeletion
	List3.ResetEveryRun = False

	List3.LoadProperties

	Set List3.TerminateCondition = Cycles(1)
	Set List3.ResetCondition = Samples(3)
	List3.Reset

	Set Self1 = New Procedure
	Self1.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_1
	'{53A4D1ED-76A7-4EC8-AFD6-7723C33CEE09}
	Self1.Guid = CGuid(&H53A4D1ED, &H76A7, &H4EC8, &HAFD6, &H7723C33C, &HEE09)
	Self1.Tag = ebEmptyText

	Self1.LoadProperties
	Self1.Subroutine = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_1 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Self1_theCollection = New RteCollection

	Set Self2 = New Procedure
	Self2.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_2
	'{F3AA56C8-AD36-418C-9F1D-6AD2D8C80F97}
	Self2.Guid = CGuid(&HF3AA56C8, &HAD36, &H418C, &H9F1D, &H6AD2D8C8, &H0F97)
	Self2.Tag = ebEmptyText

	Self2.LoadProperties
	Self2.Subroutine = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_2 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Self2_theCollection = New RteCollection

	Set Self3 = New Procedure
	Self3.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_3
	'{B208B804-D004-4461-874A-6533C7A1DFE9}
	Self3.Guid = CGuid(&HB208B804, &HD004, &H4461, &H874A, &H6533C7A1, &HDFE9)
	Self3.Tag = ebEmptyText

	Self3.LoadProperties
	Self3.Subroutine = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebDigit_3 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Self3_theCollection = New RteCollection

	Set List4 = New List
	List4.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_4
	'{E36B2C9C-CF85-4DAF-930E-48075ED7952A}
	List4.Guid = CGuid(&HE36B2C9C, &HCF85, &H4DAF, &H930E, &H48075ED7, &H952A)
	List4.Tag = ebEmptyText

	'Initialization for List4

	Set List4.Order = New SequentialOrder
	Set List4.Deletion = NoDeletion
	List4.ResetEveryRun = False

	List4.LoadProperties

	Set List4.TerminateCondition = Cycles(1)
	Set List4.ResetCondition = Samples(30)
	List4.Reset

	Set List5 = New List
	List5.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_5
	'{04CB8FB9-CA26-4754-B7FD-43C3293A59D2}
	List5.Guid = CGuid(&H04CB8FB9, &HCA26, &H4754, &HB7FD, &H43C3293A, &H59D2)
	List5.Tag = ebEmptyText

	'Initialization for List5

	Set List5.Order = New SequentialOrder
	Set List5.Deletion = NoDeletion
	List5.ResetEveryRun = False

	List5.LoadProperties

	Set List5.TerminateCondition = Cycles(1)
	Set List5.ResetCondition = Samples(30)
	List5.Reset

	Set List6 = New List
	List6.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_6
	'{7D24173A-636B-4A26-A12B-889C4AA592EB}
	List6.Guid = CGuid(&H7D24173A, &H636B, &H4A26, &HA12B, &H889C4AA5, &H92EB)
	List6.Tag = ebEmptyText

	'Initialization for List6

	Set List6.Order = New SequentialOrder
	Set List6.Deletion = NoDeletion
	List6.ResetEveryRun = False

	List6.LoadProperties

	Set List6.TerminateCondition = Cycles(1)
	Set List6.ResetCondition = Samples(30)
	List6.Reset

	Set Instructions1 = New TextDisplay
	Instructions1.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s & ebDigit_1
	'{30E2E8DD-D363-4321-A2D4-F920D7B2A7C4}
	Instructions1.Guid = CGuid(&H30E2E8DD, &HD363, &H4321, &HA2D4, &HF920D7B2, &HA7C4)
	Instructions1.Tag = ebEmptyText

	Set Instructions1EchoClients = New EchoClientCollection

	Instructions1.LoadProperties

	Set Instruction2 = New TextDisplay
	Instruction2.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_2
	'{FEE65501-0B3A-4CA7-94E0-A9EC6DFD47FD}
	Instruction2.Guid = CGuid(&HFEE65501, &H0B3A, &H4CA7, &H94E0, &HA9EC6DFD, &H47FD)
	Instruction2.Tag = ebEmptyText

	Set Instruction2EchoClients = New EchoClientCollection

	Instruction2.LoadProperties

	Set List2 = New List
	List2.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_2
	'{61E43024-CAAE-44D1-B9A8-1B3AE0489F62}
	List2.Guid = CGuid(&H61E43024, &HCAAE, &H44D1, &HB9A8, &H1B3AE048, &H9F62)
	List2.Tag = ebEmptyText

	'Initialization for List2

	Set List2.Order = New SequentialOrder
	Set List2.Deletion = NoDeletion
	List2.ResetEveryRun = False

	List2.LoadProperties

	Set List2.TerminateCondition = Cycles(1)
	Set List2.ResetCondition = Samples(3)
	List2.Reset

	Set List7 = New List
	List7.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_7
	'{2DC90A85-A745-4B51-A149-9907E2EFF586}
	List7.Guid = CGuid(&H2DC90A85, &HA745, &H4B51, &HA149, &H9907E2EF, &HF586)
	List7.Tag = ebEmptyText

	'Initialization for List7

	Set List7.Order = New SequentialOrder
	Set List7.Deletion = NoDeletion
	List7.ResetEveryRun = False

	List7.LoadProperties

	Set List7.TerminateCondition = Cycles(1)
	Set List7.ResetCondition = Samples(30)
	List7.Reset

	Set List8 = New List
	List8.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_8
	'{FE228F10-D14E-44CA-8BF7-68AF6542D8F1}
	List8.Guid = CGuid(&HFE228F10, &HD14E, &H44CA, &H8BF7, &H68AF6542, &HD8F1)
	List8.Tag = ebEmptyText

	'Initialization for List8

	Set List8.Order = New SequentialOrder
	Set List8.Deletion = NoDeletion
	List8.ResetEveryRun = False

	List8.LoadProperties

	Set List8.TerminateCondition = Cycles(1)
	Set List8.ResetCondition = Samples(30)
	List8.Reset

	Set Other1 = New Procedure
	Other1.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_1
	'{93919736-A3FA-4667-A8FE-2674511B2813}
	Other1.Guid = CGuid(&H93919736, &HA3FA, &H4667, &HA8FE, &H2674511B, &H2813)
	Other1.Tag = ebEmptyText

	Other1.LoadProperties
	Other1.Subroutine = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_1 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Other1_theCollection = New RteCollection

	Set Other2 = New Procedure
	Other2.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_2
	'{5B6041CC-5AF1-4BC9-9092-4A85FED00D73}
	Other2.Guid = CGuid(&H5B6041CC, &H5AF1, &H4BC9, &H9092, &H4A85FED0, &H0D73)
	Other2.Tag = ebEmptyText

	Other2.LoadProperties
	Other2.Subroutine = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_2 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Other2_theCollection = New RteCollection

	Set Other3 = New Procedure
	Other3.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_3
	'{2882EA68-5ACF-47C6-94F3-417BF04E1179}
	Other3.Guid = CGuid(&H2882EA68, &H5ACF, &H47C6, &H94F3, &H417BF04E, &H1179)
	Other3.Tag = ebEmptyText

	Other3.LoadProperties
	Other3.Subroutine = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebDigit_3 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Other3_theCollection = New RteCollection

	Set List9 = New List
	List9.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_9
	'{72411C9F-C471-44C2-AB99-A6E935522E13}
	List9.Guid = CGuid(&H72411C9F, &HC471, &H44C2, &HAB99, &HA6E93552, &H2E13)
	List9.Tag = ebEmptyText

	'Initialization for List9

	Set List9.Order = New SequentialOrder
	Set List9.Deletion = NoDeletion
	List9.ResetEveryRun = False

	List9.LoadProperties

	Set List9.TerminateCondition = Cycles(1)
	Set List9.ResetCondition = Samples(30)
	List9.Reset

	Set List10 = New List
	List10.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1 & ebDigit_0
	'{C6455013-5D7E-48DE-98FD-678DF8177B09}
	List10.Guid = CGuid(&HC6455013, &H5D7E, &H48DE, &H98FD, &H678DF817, &H7B09)
	List10.Tag = ebEmptyText

	'Initialization for List10

	Set List10.Order = New SequentialOrder
	Set List10.Deletion = NoDeletion
	List10.ResetEveryRun = False

	List10.LoadProperties

	Set List10.TerminateCondition = Cycles(1)
	Set List10.ResetCondition = Samples(3)
	List10.Reset

	Set Both1 = New Procedure
	Both1.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_1
	'{BA687903-4B06-4991-A83E-A53B0D86A279}
	Both1.Guid = CGuid(&HBA687903, &H4B06, &H4991, &HA83E, &HA53B0D86, &HA279)
	Both1.Tag = ebEmptyText

	Both1.LoadProperties
	Both1.Subroutine = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_1 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Both1_theCollection = New RteCollection

	Set Both2 = New Procedure
	Both2.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_2
	'{FE346DE6-8BED-48CA-B05C-A52918AE6747}
	Both2.Guid = CGuid(&HFE346DE6, &H8BED, &H48CA, &HB05C, &HA52918AE, &H6747)
	Both2.Tag = ebEmptyText

	Both2.LoadProperties
	Both2.Subroutine = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_2 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Both2_theCollection = New RteCollection

	Set Both3 = New Procedure
	Both3.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_3
	'{CE77B774-2710-42FC-8757-F74B893E33C2}
	Both3.Guid = CGuid(&HCE77B774, &H2710, &H42FC, &H8757, &HF74B893E, &H33C2)
	Both3.Tag = ebEmptyText

	Both3.LoadProperties
	Both3.Subroutine = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebDigit_3 & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set Both3_theCollection = New RteCollection

	Set List11 = New List
	List11.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1 & ebDigit_1
	'{AA731EE8-21A1-4196-BF00-1994CF0C0786}
	List11.Guid = CGuid(&HAA731EE8, &H21A1, &H4196, &HBF00, &H1994CF0C, &H0786)
	List11.Tag = ebEmptyText

	'Initialization for List11

	Set List11.Order = New SequentialOrder
	Set List11.Deletion = NoDeletion
	List11.ResetEveryRun = False

	List11.LoadProperties

	Set List11.TerminateCondition = Cycles(1)
	Set List11.ResetCondition = Samples(30)
	List11.Reset

	Set List12 = New List
	List12.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1 & ebDigit_2
	'{255F016A-7224-41B1-A2DF-45FEC41B547A}
	List12.Guid = CGuid(&H255F016A, &H7224, &H41B1, &HA2DF, &H45FEC41B, &H547A)
	List12.Tag = ebEmptyText

	'Initialization for List12

	Set List12.Order = New SequentialOrder
	Set List12.Deletion = NoDeletion
	List12.ResetEveryRun = False

	List12.LoadProperties

	Set List12.TerminateCondition = Cycles(1)
	Set List12.ResetCondition = Samples(30)
	List12.Reset

	Set List13 = New List
	List13.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1 & ebDigit_3
	'{A01D2DBD-B93B-47C7-B612-3C80593AA8B5}
	List13.Guid = CGuid(&HA01D2DBD, &HB93B, &H47C7, &HB612, &H3C80593A, &HA8B5)
	List13.Tag = ebEmptyText

	'Initialization for List13

	Set List13.Order = New SequentialOrder
	Set List13.Deletion = NoDeletion
	List13.ResetEveryRun = False

	List13.LoadProperties

	Set List13.TerminateCondition = Cycles(1)
	Set List13.ResetCondition = Samples(30)
	List13.Reset

	Set LAOtherMixed = New Procedure
	LAOtherMixed.Name = ebUCase_L & ebUCase_A & ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d
	'{257FEB7B-5976-40CF-A181-62D11F6403D5}
	LAOtherMixed.Guid = CGuid(&H257FEB7B, &H5976, &H40CF, &HA181, &H62D11F64, &H03D5)
	LAOtherMixed.Tag = ebEmptyText

	LAOtherMixed.LoadProperties
	LAOtherMixed.Subroutine = ebUCase_L & ebUCase_A & ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LAOtherMixed_theCollection = New RteCollection

	Set LAOtherGain = New Procedure
	LAOtherGain.Name = ebUCase_L & ebUCase_A & ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n
	'{01B3717A-4E69-48B9-A8B4-ABB8E31CDC71}
	LAOtherGain.Guid = CGuid(&H01B3717A, &H4E69, &H48B9, &HA8B4, &HABB8E31C, &HDC71)
	LAOtherGain.Tag = ebEmptyText

	LAOtherGain.LoadProperties
	LAOtherGain.Subroutine = ebUCase_L & ebUCase_A & ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LAOtherGain_theCollection = New RteCollection

	Set LABothMixed = New Procedure
	LABothMixed.Name = ebUCase_L & ebUCase_A & ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d
	'{9F0ADF55-D274-48C1-9B1C-F5A892755776}
	LABothMixed.Guid = CGuid(&H9F0ADF55, &HD274, &H48C1, &H9B1C, &HF5A89275, &H5776)
	LABothMixed.Tag = ebEmptyText

	LABothMixed.LoadProperties
	LABothMixed.Subroutine = ebUCase_L & ebUCase_A & ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LABothMixed_theCollection = New RteCollection

	Set LABothGain = New Procedure
	LABothGain.Name = ebUCase_L & ebUCase_A & ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n
	'{72E8DE14-70B9-498A-AB7E-72A9B19E73F2}
	LABothGain.Guid = CGuid(&H72E8DE14, &H70B9, &H498A, &HAB7E, &H72A9B19E, &H73F2)
	LABothGain.Tag = ebEmptyText

	LABothGain.LoadProperties
	LABothGain.Subroutine = ebUCase_L & ebUCase_A & ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set LABothGain_theCollection = New RteCollection

	Set InstructionOptions1 = New Slide
	InstructionOptions1.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_O & ebLCase_p & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s & ebDigit_1
	'{2A22BB3A-6F3C-4006-B1A3-78C58861AAA9}
	InstructionOptions1.Guid = CGuid(&H2A22BB3A, &H6F3C, &H4006, &HB1A3, &H78C58861, &HAAA9)
	InstructionOptions1.Tag = ebEmptyText

	Set InstructionOptions1EchoClients = New EchoClientCollection

	InstructionOptions1.LoadProperties

	Set InstructionResponse2 = New Slide
	InstructionResponse2.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebUCase_R & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebDigit_2
	'{E549F044-27D2-4C72-BC02-518932705CF5}
	InstructionResponse2.Guid = CGuid(&HE549F044, &H27D2, &H4C72, &HBC02, &H51893270, &H5CF5)
	InstructionResponse2.Tag = ebEmptyText

	Set InstructionResponse2EchoClients = New EchoClientCollection

	InstructionResponse2.LoadProperties

	Set Instruction5 = New TextDisplay
	Instruction5.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_5
	'{6BE3F443-A149-4F3F-89A7-A5BE2736D5B6}
	Instruction5.Guid = CGuid(&H6BE3F443, &HA149, &H4F3F, &H89A7, &HA5BE2736, &HD5B6)
	Instruction5.Tag = ebEmptyText

	Set Instruction5EchoClients = New EchoClientCollection

	Instruction5.LoadProperties

	Set Instruction6 = New TextDisplay
	Instruction6.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_6
	'{B0CE05D4-4F03-44AF-B58F-8C6B9A3962D6}
	Instruction6.Guid = CGuid(&HB0CE05D4, &H4F03, &H44AF, &HB58F, &H8C6B9A39, &H62D6)
	Instruction6.Tag = ebEmptyText

	Set Instruction6EchoClients = New EchoClientCollection

	Instruction6.LoadProperties

	Set Instruction7 = New TextDisplay
	Instruction7.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_7
	'{0A8E3E99-E0E5-4642-83C8-891F45D1F235}
	Instruction7.Guid = CGuid(&H0A8E3E99, &HE0E5, &H4642, &H83C8, &H891F45D1, &HF235)
	Instruction7.Tag = ebEmptyText

	Set Instruction7EchoClients = New EchoClientCollection

	Instruction7.LoadProperties

	Set Instruction8 = New TextDisplay
	Instruction8.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_8
	'{DA5FB1DC-2B29-4B76-8958-C7F1A4524458}
	Instruction8.Guid = CGuid(&HDA5FB1DC, &H2B29, &H4B76, &H8958, &HC7F1A452, &H4458)
	Instruction8.Tag = ebEmptyText

	Set Instruction8EchoClients = New EchoClientCollection

	Instruction8.LoadProperties

	Set Instruction9 = New TextDisplay
	Instruction9.Name = ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebDigit_9
	'{4F0B88D5-6E8E-4EE2-BC38-DB0ED28CC06C}
	Instruction9.Guid = CGuid(&H4F0B88D5, &H6E8E, &H4EE2, &HBC38, &HDB0ED28C, &HC06C)
	Instruction9.Tag = ebEmptyText

	Set Instruction9EchoClients = New EchoClientCollection

	Instruction9.LoadProperties

	Set practiceoptions = New Slide
	practiceoptions.Name = ebLCase_p & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebLCase_o & ebLCase_p & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s
	'{191AC01B-6598-4D75-82F1-03F7E4E5D7EB}
	practiceoptions.Guid = CGuid(&H191AC01B, &H6598, &H4D75, &H82F1, &H03F7E4E5, &HD7EB)
	practiceoptions.Tag = ebEmptyText

	practiceoptions.LoadProperties

	Set practiceresponse = New Slide
	practiceresponse.Name = ebLCase_p & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e
	'{45E93482-BDAD-4358-9572-E490B2D883A1}
	practiceresponse.Guid = CGuid(&H45E93482, &HBDAD, &H4358, &H9572, &HE490B2D8, &H83A1)
	practiceresponse.Tag = ebEmptyText

	Set practiceresponseEchoClients = New EchoClientCollection

	practiceresponse.LoadProperties

	Set practiceresponse3 = New Slide
	practiceresponse3.Name = ebLCase_p & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebLCase_r & ebLCase_e & ebLCase_s & ebLCase_p & ebLCase_o & ebLCase_n & ebLCase_s & ebLCase_e & ebDigit_3
	'{D4314585-CF82-4CC9-B6C6-960C82ADBA01}
	practiceresponse3.Guid = CGuid(&HD4314585, &HCF82, &H4CC9, &HB6C6, &H960C82AD, &HBA01)
	practiceresponse3.Tag = ebEmptyText

	Set practiceresponse3EchoClients = New EchoClientCollection

	practiceresponse3.LoadProperties

	Set practiceoptions3 = New Slide
	practiceoptions3.Name = ebLCase_p & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebLCase_o & ebLCase_p & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s & ebDigit_3
	'{752664BF-679A-4845-851C-83B155B27BDF}
	practiceoptions3.Guid = CGuid(&H752664BF, &H679A, &H4845, &H851C, &H83B155B2, &H7BDF)
	practiceoptions3.Tag = ebEmptyText

	practiceoptions3.LoadProperties

	Set PracticeList = New List
	PracticeList.Name = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t
	'{8DD92F67-DB7A-4084-BD46-03C12F33B1DD}
	PracticeList.Guid = CGuid(&H8DD92F67, &HDB7A, &H4084, &HBD46, &H03C12F33, &HB1DD)
	PracticeList.Tag = ebEmptyText

	'Initialization for PracticeList

	Set PracticeList.Order = New SequentialOrder
	Set PracticeList.Deletion = NoDeletion
	PracticeList.ResetEveryRun = False

	PracticeList.LoadProperties

	Set PracticeList.TerminateCondition = Cycles(1)
	Set PracticeList.ResetCondition = Samples(1)
	PracticeList.Reset

	Set PracticeTrials = New Procedure
	PracticeTrials.Name = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_T & ebLCase_r & ebLCase_i & ebLCase_a & ebLCase_l & ebLCase_s
	'{210A2855-78CC-4D11-82F3-CAD4EC385935}
	PracticeTrials.Guid = CGuid(&H210A2855, &H78CC, &H4D11, &H82F3, &HCAD4EC38, &H5935)
	PracticeTrials.Tag = ebEmptyText

	PracticeTrials.LoadProperties
	PracticeTrials.Subroutine = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_T & ebLCase_r & ebLCase_i & ebLCase_a & ebLCase_l & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set PracticeTrials_theCollection = New RteCollection

	Set List14 = New List
	List14.Name = ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t & ebDigit_1 & ebDigit_4
	'{C2B77392-57E5-48B5-A5EF-65993D75796B}
	List14.Guid = CGuid(&HC2B77392, &H57E5, &H48B5, &HA5EF, &H65993D75, &H796B)
	List14.Tag = ebEmptyText

	'Initialization for List14

	Set List14.Order = New SequentialOrder
	Set List14.Deletion = NoDeletion
	List14.ResetEveryRun = False

	List14.LoadProperties

	Set List14.TerminateCondition = Cycles(1)
	Set List14.ResetCondition = Samples(4)
	List14.Reset

	Set PracticeMixed = New Procedure
	PracticeMixed.Name = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d
	'{07CDD0FE-553C-4A9F-8293-214F6F102CDE}
	PracticeMixed.Guid = CGuid(&H07CDD0FE, &H553C, &H4A9F, &H8293, &H214F6F10, &H2CDE)
	PracticeMixed.Tag = ebEmptyText

	PracticeMixed.LoadProperties
	PracticeMixed.Subroutine = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_M & ebLCase_i & ebLCase_x & ebLCase_e & ebLCase_d & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set PracticeMixed_theCollection = New RteCollection

	Set PracticeGain = New Procedure
	PracticeGain.Name = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n
	'{A6D78B95-BB58-49D7-80D9-4F1B1C86C89E}
	PracticeGain.Guid = CGuid(&HA6D78B95, &HBB58, &H49D7, &H80D9, &H4F1B1C86, &HC89E)
	PracticeGain.Tag = ebEmptyText

	PracticeGain.LoadProperties
	PracticeGain.Subroutine = ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_c & ebLCase_e & ebUCase_G & ebLCase_a & ebLCase_i & ebLCase_n & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set PracticeGain_theCollection = New RteCollection

	Set FeedbackDisplay2 = New FeedbackDisplay
	FeedbackDisplay2.Name = ebUCase_F & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDigit_2
	'{5D48EC58-DACB-4DB3-9848-EAFA9312A5DF}
	FeedbackDisplay2.Guid = CGuid(&H5D48EC58, &HDACB, &H4DB3, &H9848, &HEAFA9312, &HA5DF)
	FeedbackDisplay2.Tag = ebEmptyText

	FeedbackDisplay2.LoadProperties

	Set FeedbackDisplay4 = New FeedbackDisplay
	FeedbackDisplay4.Name = ebUCase_F & ebLCase_e & ebLCase_e & ebLCase_d & ebLCase_b & ebLCase_a & ebLCase_c & ebLCase_k & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDigit_4
	'{EE8D2384-3CCE-4F28-AB55-FB9AD2425E65}
	FeedbackDisplay4.Guid = CGuid(&HEE8D2384, &H3CCE, &H4F28, &HAB55, &HFB9AD242, &H5E65)
	FeedbackDisplay4.Tag = ebEmptyText

	FeedbackDisplay4.LoadProperties

	Set SelfSpaceBar1 = New TextDisplay
	SelfSpaceBar1.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_1
	'{F588E3AE-32FF-4245-A237-93DA96B479C9}
	SelfSpaceBar1.Guid = CGuid(&HF588E3AE, &H32FF, &H4245, &HA237, &H93DA96B4, &H79C9)
	SelfSpaceBar1.Tag = ebEmptyText

	Set SelfSpaceBar1EchoClients = New EchoClientCollection

	SelfSpaceBar1.LoadProperties

	Set SelfSpaceBar2 = New TextDisplay
	SelfSpaceBar2.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_2
	'{E11BE0B0-BFC1-4774-865D-F17F28A1E63F}
	SelfSpaceBar2.Guid = CGuid(&HE11BE0B0, &HBFC1, &H4774, &H865D, &HF17F28A1, &HE63F)
	SelfSpaceBar2.Tag = ebEmptyText

	Set SelfSpaceBar2EchoClients = New EchoClientCollection

	SelfSpaceBar2.LoadProperties

	Set SelfSpaceBar3 = New TextDisplay
	SelfSpaceBar3.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_3
	'{004A802E-5334-4C29-849E-E891A20C7027}
	SelfSpaceBar3.Guid = CGuid(&H004A802E, &H5334, &H4C29, &H849E, &HE891A20C, &H7027)
	SelfSpaceBar3.Tag = ebEmptyText

	Set SelfSpaceBar3EchoClients = New EchoClientCollection

	SelfSpaceBar3.LoadProperties

	Set OtherSpaceBar1 = New TextDisplay
	OtherSpaceBar1.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_1
	'{255897B3-64C9-4133-99C7-22044CF2D589}
	OtherSpaceBar1.Guid = CGuid(&H255897B3, &H64C9, &H4133, &H99C7, &H22044CF2, &HD589)
	OtherSpaceBar1.Tag = ebEmptyText

	Set OtherSpaceBar1EchoClients = New EchoClientCollection

	OtherSpaceBar1.LoadProperties

	Set OtherSpaceBar2 = New TextDisplay
	OtherSpaceBar2.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_2
	'{12244265-2D15-4530-9616-DFDDA6D8A3B8}
	OtherSpaceBar2.Guid = CGuid(&H12244265, &H2D15, &H4530, &H9616, &HDFDDA6D8, &HA3B8)
	OtherSpaceBar2.Tag = ebEmptyText

	Set OtherSpaceBar2EchoClients = New EchoClientCollection

	OtherSpaceBar2.LoadProperties

	Set BothSpaceBar1 = New TextDisplay
	BothSpaceBar1.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_1
	'{109F2FB5-4C22-4264-AFC1-2CD68140AE44}
	BothSpaceBar1.Guid = CGuid(&H109F2FB5, &H4C22, &H4264, &HAFC1, &H2CD68140, &HAE44)
	BothSpaceBar1.Tag = ebEmptyText

	Set BothSpaceBar1EchoClients = New EchoClientCollection

	BothSpaceBar1.LoadProperties

	Set OtherSpaceBar3 = New TextDisplay
	OtherSpaceBar3.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_3
	'{6E3CC73C-F833-4838-BA3B-0A42F3353792}
	OtherSpaceBar3.Guid = CGuid(&H6E3CC73C, &HF833, &H4838, &HBA3B, &H0A42F335, &H3792)
	OtherSpaceBar3.Tag = ebEmptyText

	Set OtherSpaceBar3EchoClients = New EchoClientCollection

	OtherSpaceBar3.LoadProperties

	Set BothSpaceBar2 = New TextDisplay
	BothSpaceBar2.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_2
	'{6C20DE1C-E6A8-4946-938B-B9E8C93FD0FF}
	BothSpaceBar2.Guid = CGuid(&H6C20DE1C, &HE6A8, &H4946, &H938B, &HB9E8C93F, &HD0FF)
	BothSpaceBar2.Tag = ebEmptyText

	Set BothSpaceBar2EchoClients = New EchoClientCollection

	BothSpaceBar2.LoadProperties

	Set BothSpaceBar3 = New TextDisplay
	BothSpaceBar3.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_S & ebLCase_p & ebLCase_a & ebLCase_c & ebLCase_e & ebUCase_B & ebLCase_a & ebLCase_r & ebDigit_3
	'{52F5D8DA-6C9C-4510-8292-B3EABB159687}
	BothSpaceBar3.Guid = CGuid(&H52F5D8DA, &H6C9C, &H4510, &H8292, &HB3EABB15, &H9687)
	BothSpaceBar3.Tag = ebEmptyText

	Set BothSpaceBar3EchoClients = New EchoClientCollection

	BothSpaceBar3.LoadProperties

	Set OtherBlockInstructions = New Slide
	OtherBlockInstructions.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_B & ebLCase_l & ebLCase_o & ebLCase_c & ebLCase_k & ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s
	'{2AAB8F33-02A0-4AE3-9586-86CAAE23709D}
	OtherBlockInstructions.Guid = CGuid(&H2AAB8F33, &H02A0, &H4AE3, &H9586, &H86CAAE23, &H709D)
	OtherBlockInstructions.Tag = ebEmptyText

	Set OtherBlockInstructionsEchoClients = New EchoClientCollection

	OtherBlockInstructions.LoadProperties

	Set BothBlockInstructions = New Slide
	BothBlockInstructions.Name = ebUCase_B & ebLCase_o & ebLCase_t & ebLCase_h & ebUCase_B & ebLCase_l & ebLCase_o & ebLCase_c & ebLCase_k & ebUCase_I & ebLCase_n & ebLCase_s & ebLCase_t & ebLCase_r & ebLCase_u & ebLCase_c & ebLCase_t & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_s
	'{167AC783-A3F1-4786-8D37-9DD77305213F}
	BothBlockInstructions.Guid = CGuid(&H167AC783, &HA3F1, &H4786, &H8D37, &H9DD77305, &H213F)
	BothBlockInstructions.Tag = ebEmptyText

	Set BothBlockInstructionsEchoClients = New EchoClientCollection

	BothBlockInstructions.LoadProperties

	Set OtherFB = New FeedbackDisplay
	OtherFB.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_F & ebUCase_B
	'{D413D826-86E8-4D59-BB0E-1F1D95EDFD5F}
	OtherFB.Guid = CGuid(&HD413D826, &H86E8, &H4D59, &HBB0E, &H1F1D95ED, &HFD5F)
	OtherFB.Tag = ebEmptyText

	OtherFB.LoadProperties

	Set SelfFB = New FeedbackDisplay
	SelfFB.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_F & ebUCase_B
	'{53EC35CD-D71F-4B99-A25F-16A5BA44C638}
	SelfFB.Guid = CGuid(&H53EC35CD, &HD71F, &H4B99, &HA25F, &H16A5BA44, &HC638)
	SelfFB.Tag = ebEmptyText

	SelfFB.LoadProperties

	Set thanksforplaying = New TextDisplay
	thanksforplaying.Name = ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebLCase_k & ebLCase_s & ebLCase_f & ebLCase_o & ebLCase_r & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebLCase_i & ebLCase_n & ebLCase_g
	'{4ABB62C3-1E16-4DC7-8D10-A94BDCF79CC6}
	thanksforplaying.Guid = CGuid(&H4ABB62C3, &H1E16, &H4DC7, &H8D10, &HA94BDCF7, &H9CC6)
	thanksforplaying.Tag = ebEmptyText

	Set thanksforplayingEchoClients = New EchoClientCollection

	thanksforplaying.LoadProperties

	Set RatingsList = New List
	RatingsList.Name = ebUCase_R & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s & ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t
	'{93C3876D-9334-4E57-A796-C3A935D63869}
	RatingsList.Guid = CGuid(&H93C3876D, &H9334, &H4E57, &HA796, &HC3A935D6, &H3869)
	RatingsList.Tag = ebEmptyText

	'Initialization for RatingsList

	Set RatingsList.Order = New SequentialOrder
	Set RatingsList.Deletion = NoDeletion
	RatingsList.ResetEveryRun = False

	RatingsList.LoadProperties

	Set RatingsList.TerminateCondition = Cycles(1)
	Set RatingsList.ResetCondition = Samples(6)
	RatingsList.Reset

	Set selfratings = New Procedure
	selfratings.Name = ebLCase_s & ebLCase_e & ebLCase_l & ebLCase_f & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s
	'{6B05EB36-7F46-4E7F-B5C0-7E5912058976}
	selfratings.Guid = CGuid(&H6B05EB36, &H7F46, &H4E7F, &HB5C0, &H7E591205, &H8976)
	selfratings.Tag = ebEmptyText

	selfratings.LoadProperties
	selfratings.Subroutine = ebLCase_s & ebLCase_e & ebLCase_l & ebLCase_f & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set selfratings_theCollection = New RteCollection

	Set otherratings = New Procedure
	otherratings.Name = ebLCase_o & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s
	'{016ECFC5-73D1-48A6-ABBC-957E1EF9BADC}
	otherratings.Guid = CGuid(&H016ECFC5, &H73D1, &H48A6, &HABBC, &H957E1EF9, &HBADC)
	otherratings.Tag = ebEmptyText

	otherratings.LoadProperties
	otherratings.Subroutine = ebLCase_o & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set otherratings_theCollection = New RteCollection

	Set sharedratings = New Procedure
	sharedratings.Name = ebLCase_s & ebLCase_h & ebLCase_a & ebLCase_r & ebLCase_e & ebLCase_d & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s
	'{BA8ACF01-838A-4FDC-989C-73F864F6D020}
	sharedratings.Guid = CGuid(&HBA8ACF01, &H838A, &H4FDC, &H989C, &H73F864F6, &HD020)
	sharedratings.Tag = ebEmptyText

	sharedratings.LoadProperties
	sharedratings.Subroutine = ebLCase_s & ebLCase_h & ebLCase_a & ebLCase_r & ebLCase_e & ebLCase_d & ebLCase_r & ebLCase_a & ebLCase_t & ebLCase_i & ebLCase_n & ebLCase_g & ebLCase_s & ebUnderscore & ebUCase_R & ebLCase_u & ebLCase_n
Set sharedratings_theCollection = New RteCollection

	Set SelfOutcomes = New Slide
	SelfOutcomes.Name = ebUCase_S & ebLCase_e & ebLCase_l & ebLCase_f & ebUCase_O & ebLCase_u & ebLCase_t & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_e & ebLCase_s
	'{3E9A09B3-67CF-4C68-816D-384F95D64780}
	SelfOutcomes.Guid = CGuid(&H3E9A09B3, &H67CF, &H4C68, &H816D, &H384F95D6, &H4780)
	SelfOutcomes.Tag = ebEmptyText

	Set SelfOutcomesEchoClients = New EchoClientCollection

	SelfOutcomes.LoadProperties

	Set OtherOutcomes = New Slide
	OtherOutcomes.Name = ebUCase_O & ebLCase_t & ebLCase_h & ebLCase_e & ebLCase_r & ebUCase_O & ebLCase_u & ebLCase_t & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_e & ebLCase_s
	'{2C210E95-B15E-4E94-A3AC-B6BED9F96EC5}
	OtherOutcomes.Guid = CGuid(&H2C210E95, &HB15E, &H4E94, &HA3AC, &HB6BED9F9, &H6EC5)
	OtherOutcomes.Tag = ebEmptyText

	Set OtherOutcomesEchoClients = New EchoClientCollection

	OtherOutcomes.LoadProperties

	Set SharedOutcomes = New Slide
	SharedOutcomes.Name = ebUCase_S & ebLCase_h & ebLCase_a & ebLCase_r & ebLCase_e & ebLCase_d & ebUCase_O & ebLCase_u & ebLCase_t & ebLCase_c & ebLCase_o & ebLCase_m & ebLCase_e & ebLCase_s
	'{B6C6BD30-5B7F-44CB-8C40-E02B17476937}
	SharedOutcomes.Guid = CGuid(&HB6C6BD30, &H5B7F, &H44CB, &H8C40, &HE02B1747, &H6937)
	SharedOutcomes.Tag = ebEmptyText

	Set SharedOutcomesEchoClients = New EchoClientCollection

	SharedOutcomes.LoadProperties

	Set pleasenotify = New TextDisplay
	pleasenotify.Name = ebLCase_p & ebLCase_l & ebLCase_e & ebLCase_a & ebLCase_s & ebLCase_e & ebLCase_n & ebLCase_o & ebLCase_t & ebLCase_i & ebLCase_f & ebLCase_y
	'{E1AD7407-A65E-4D2B-8671-79317793C7B2}
	pleasenotify.Guid = CGuid(&HE1AD7407, &HA65E, &H4D2B, &H8671, &H79317793, &HC7B2)
	pleasenotify.Tag = ebEmptyText

	Set pleasenotifyEchoClients = New EchoClientCollection

	pleasenotify.LoadProperties

	Set ITIList = New List
	ITIList.Name = ebUCase_I & ebUCase_T & ebUCase_I & ebUCase_L & ebLCase_i & ebLCase_s & ebLCase_t
	'{1CBAB08D-1431-4AD8-8990-014D0D2F02F5}
	ITIList.Guid = CGuid(&H1CBAB08D, &H1431, &H4AD8, &H8990, &H014D0D2F, &H02F5)
	ITIList.Tag = ebEmptyText

	'Initialization for ITIList

	Set ITIList.Order = New RandomOrder
	CRandomOrder(ITIList.Order).NoRepeatAfterReset = True
	Set ITIList.Deletion = NoDeletion
	ITIList.ResetEveryRun = False

	ITIList.LoadProperties

	Set ITIList.TerminateCondition = Cycles(1)
	Set ITIList.ResetCondition = Samples(30)
	ITIList.Reset

	Set ITIPrac = New TextDisplay
	ITIPrac.Name = ebUCase_I & ebUCase_T & ebUCase_I & ebUCase_P & ebLCase_r & ebLCase_a & ebLCase_c
	'{345B86EC-E127-471F-B8ED-CF2EBFE7C693}
	ITIPrac.Guid = CGuid(&H345B86EC, &HE127, &H471F, &HB8ED, &HCF2EBFE7, &HC693)
	ITIPrac.Tag = ebEmptyText

	ITIPrac.LoadProperties


End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
' InitGlobals
'
'--------------------------------------------------------------------------
Sub InitGlobals(c As Context)


	'Assign Context to the StartupInfo object
	Set Rte.StartupInfo.Context = c

	'Load and Transfer external StartupInfo
	Rte.StartupInfo.Load
	Rte.StartupInfo.Transfer

End Sub



'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitGlobals
'--------------------------------------------------------------------------
Sub UnInitGlobals()

	'Close the external StartupInfo
	Rte.StartupInfo.Close

End Sub
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()

	'UnInit All Devices
	Rte.DeviceManager.UnInit
	Display.Close
	Set Display = Nothing

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing

	Sound.Close
	ParallelPort.Close
	Set ParallelPort = Nothing
End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set SessionProc = Nothing

	Set List1 = Nothing

	Set Instructions = Nothing

	Set Ratings = Nothing

	Set SelfTask = Nothing

	Set OtherTask = Nothing

	Set BothTask = Nothing

	Set ITI = Nothing

	Set Options = Nothing

	Set ISI = Nothing

	Set Response = Nothing

	Set ResponseEchoClients = Nothing

	Set BothFB = Nothing

	Set LASelfMixed = Nothing

	Set LASelfGain = Nothing

	Set List3 = Nothing

	Set Self1 = Nothing

	Set Self2 = Nothing

	Set Self3 = Nothing

	Set List4 = Nothing

	Set List5 = Nothing

	Set List6 = Nothing

	Set Instructions1 = Nothing

	Set Instructions1EchoClients = Nothing

	Set Instruction2 = Nothing

	Set Instruction2EchoClients = Nothing

	Set List2 = Nothing

	Set List7 = Nothing

	Set List8 = Nothing

	Set Other1 = Nothing

	Set Other2 = Nothing

	Set Other3 = Nothing

	Set List9 = Nothing

	Set List10 = Nothing

	Set Both1 = Nothing

	Set Both2 = Nothing

	Set Both3 = Nothing

	Set List11 = Nothing

	Set List12 = Nothing

	Set List13 = Nothing

	Set LAOtherMixed = Nothing

	Set LAOtherGain = Nothing

	Set LABothMixed = Nothing

	Set LABothGain = Nothing

	Set InstructionOptions1 = Nothing

	Set InstructionOptions1EchoClients = Nothing

	Set InstructionResponse2 = Nothing

	Set InstructionResponse2EchoClients = Nothing

	Set Instruction5 = Nothing

	Set Instruction5EchoClients = Nothing

	Set Instruction6 = Nothing

	Set Instruction6EchoClients = Nothing

	Set Instruction7 = Nothing

	Set Instruction7EchoClients = Nothing

	Set Instruction8 = Nothing

	Set Instruction8EchoClients = Nothing

	Set Instruction9 = Nothing

	Set Instruction9EchoClients = Nothing

	Set practiceoptions = Nothing

	Set practiceresponse = Nothing

	Set practiceresponseEchoClients = Nothing

	Set practiceresponse3 = Nothing

	Set practiceresponse3EchoClients = Nothing

	Set practiceoptions3 = Nothing

	Set PracticeList = Nothing

	Set PracticeTrials = Nothing

	Set List14 = Nothing

	Set PracticeMixed = Nothing

	Set PracticeGain = Nothing

	Set FeedbackDisplay2 = Nothing

	Set FeedbackDisplay4 = Nothing

	Set SelfSpaceBar1 = Nothing

	Set SelfSpaceBar1EchoClients = Nothing

	Set SelfSpaceBar2 = Nothing

	Set SelfSpaceBar2EchoClients = Nothing

	Set SelfSpaceBar3 = Nothing

	Set SelfSpaceBar3EchoClients = Nothing

	Set OtherSpaceBar1 = Nothing

	Set OtherSpaceBar1EchoClients = Nothing

	Set OtherSpaceBar2 = Nothing

	Set OtherSpaceBar2EchoClients = Nothing

	Set BothSpaceBar1 = Nothing

	Set BothSpaceBar1EchoClients = Nothing

	Set OtherSpaceBar3 = Nothing

	Set OtherSpaceBar3EchoClients = Nothing

	Set BothSpaceBar2 = Nothing

	Set BothSpaceBar2EchoClients = Nothing

	Set BothSpaceBar3 = Nothing

	Set BothSpaceBar3EchoClients = Nothing

	Set OtherBlockInstructions = Nothing

	Set OtherBlockInstructionsEchoClients = Nothing

	Set BothBlockInstructions = Nothing

	Set BothBlockInstructionsEchoClients = Nothing

	Set OtherFB = Nothing

	Set SelfFB = Nothing

	Set thanksforplaying = Nothing

	Set thanksforplayingEchoClients = Nothing

	Set RatingsList = Nothing

	Set selfratings = Nothing

	Set otherratings = Nothing

	Set sharedratings = Nothing

	Set SelfOutcomes = Nothing

	Set SelfOutcomesEchoClients = Nothing

	Set OtherOutcomes = Nothing

	Set OtherOutcomesEchoClients = Nothing

	Set SharedOutcomes = Nothing

	Set SharedOutcomesEchoClients = Nothing

	Set pleasenotify = Nothing

	Set pleasenotifyEchoClients = Nothing

	Set ITIList = Nothing

	Set ITIPrac = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	c.Name = "ebContext"
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "SLA_v1a_withpractice_Other_8_11_16A_ORDER2"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$
	ebContext.SetAttrib "SessionStartDateTimeUtc", NowUtc()

	'Initialize global variables for packages
	InitGlobals c

	' Initialize the Display Device(s) for runtime
	Dim DisplayDisplayDeviceInfo As DisplayDeviceInfo
	DisplayDisplayDeviceInfo.DefaultColor = Color.Black
	DisplayDisplayDeviceInfo.DisplayIndex = 1
	If c.AttribExists(ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r) Then DisplayDisplayDeviceInfo.DefaultColor = CColor(c.GetAttrib(ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_e & ebLCase_f & ebLCase_a & ebLCase_u & ebLCase_l & ebLCase_t & ebUCase_C & ebLCase_o & ebLCase_l & ebLCase_o & ebLCase_r))
	If c.AttribExists(ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x) Then DisplayDisplayDeviceInfo.DisplayIndex = CLng(c.GetAttrib(ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebDot & ebUCase_D & ebLCase_i & ebLCase_s & ebLCase_p & ebLCase_l & ebLCase_a & ebLCase_y & ebUCase_I & ebLCase_n & ebLCase_d & ebLCase_e & ebLCase_x))



	CreateDefaultPort DisplayDisplayDeviceInfo.DefaultColor, "", DisplayDisplayDeviceInfo.DisplayIndex

	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo

	' Set the defaults for all of the StartupInfo
	If Not c.AttribExists("Subject") Then c.SetAttrib "Subject", "1"
	If Not c.AttribExists("Session") Then c.SetAttrib "Session", "1"
	If Not c.AttribExists("Age") Then c.SetAttrib "Age", "0"
	If Not c.AttribExists("Sex") Then c.SetAttrib "Sex", "male"

	' Determine if StartupInfo.UseDefaults exists and is True/False to override prompts for StartupInfo parameters
	Dim bStartupInfoUseDefaults As Boolean
	bStartupInfoUseDefaults = False
	If c.AttribExists("StartupInfo.UseDefaults") Then bStartupInfoUseDefaults = CLogical(c.GetAttrib("StartupInfo.UseDefaults"))
	If Not bStartupInfoUseDefaults Then

		Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
		vAnswer = AskBox("Please enter the Subject Number (0=No Data Logging):", c.GetAttrib("Subject"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Subject must not be less than 0"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) > 2147483647 Then
				MsgBox "The value for Subject must not be greater than 2147483647"
				GoTo StartupInfoPrompt_Subject
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
		vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) < 1 Then
				MsgBox "The value for Session must not be less than 1"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Session must not be greater than 32767"
				GoTo StartupInfoPrompt_Session
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Session", CStr(vAnswer)

StartupInfoPrompt_Age:
		vAnswer = AskBox("Please enter Subject's Age (0-150):", c.GetAttrib("Age"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Age
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Age must not be less than 0"
				GoTo StartupInfoPrompt_Age
			ElseIf CLng(vAnswer) > 150 Then
				MsgBox "The value for Age must not be greater than 150"
				GoTo StartupInfoPrompt_Age
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Age", CStr(vAnswer)

StartupInfoPrompt_Sex:
		Dim arrayChoicesSex(2)
		arrayChoicesSex(0) = "male"
		arrayChoicesSex(1) = "female"
		vAnswer = SelectBox(, "Please enter Subject's Sex:", arrayChoicesSex)
		If vAnswer >= 0 then
			c.SetAttrib "Sex", arrayChoicesSex(vAnswer)
		Else
			GoTo ExperimentAbort
		End If

		' Display the summary
		Dim strSummary As String
		strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
		strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
		strSummary = strSummary & "Age:    " & c.GetAttrib("Age") & "\n"
		strSummary = strSummary & "Sex:    " & c.GetAttrib("Sex") & "\n"
		strSummary = strSummary & "\nContinue with the above startup info?"

		Dim nSummaryAnswer As Integer
		nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel + ebQuestion, "Summary of Startup Info")
		If nSummaryAnswer = ebNo Then
				GoTo StartupInfo_Begin
		ElseIf nSummaryAnswer = ebCancel Then
				GoTo ExperimentAbort
		End If

	End If


	'Assign the Clock.Scale value
	Clock.Scale = 1.000000

	'If the attribute Clock.Scale.Override exists
	'  then use it for to set the Clock.Scale value
	If c.AttribExists("Clock.Scale.Override") Then
		Clock.Scale = CDbl(c.GetAttrib("Clock.Scale.Override"))
	End If

	' Set the Filenames for the data files
	Dim strFilenameBase As String
	Dim strFilenameRecovery As String
	Dim strFilenameEDAT As String

	'If the attribute DataFile.Filename.Override exists
	'  then use it for the .txt and .edat2 filenames
	If c.AttribExists("DataFile.Filename.Override") Then

		' Set the default Data Filename
		strFilenameBase = CStr(c.GetAttrib("DataFile.Filename.Override"))

	Else

		' Set the default Data Filename
		strFilenameBase = c.GetAttrib("Experiment") &_
				"-" &_
				c.GetAttrib("Subject") &_
				"-" &_
				c.GetAttrib("Session")

	End If

	'Set the name of the data file
	strFilenameRecovery = strFilenameBase & ".txt"
	strFilenameEDAT = strFilenameBase & ".edat2"
	c.DataFile.Filename = strFilenameRecovery
	c.SetAttrib "DataFile.Basename", strFilenameBase

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Or FileExists(strFilenameEDAT) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo + ebQuestion) Then
				GoTo ExperimentAbort
			End If
			' If you receive an error here then ensure that your E-Recovery (txt) file or
			' the edat2 file is not open and then try the experiment run again.
			If FileExists(strFilenameEDAT) Then Kill strFilenameEDAT
			If FileExists(c.DataFile.Filename) Then Kill c.DataFile.Filename
		End If
	End If

	' Set defaults for RandomSeed and GroupNumber if StartupInfo did not assign their values
	If Not c.AttribExists("RandomSeed") Then c.SetAttrib "RandomSeed", PRNG.GetSeed()
	If Not c.AttribExists("Group") Then c.SetAttrib "Group", "1"

	'Set the random seed
	Randomize CLng(c.GetAttrib("RandomSeed"))

	' Initialize Experiment Advisor Properties
	Rte.ExperimentAdvisor.LoadProperties
	If c.AttribExists("Rte.ExperimentAdvisor.Enabled") Then Rte.ExperimentAdvisor.Enabled = CLogical(c.GetAttrib("Rte.ExperimentAdvisor.Enabled"))
	If c.AttribExists("Rte.ExperimentAdvisor.Filename") Then Rte.ExperimentAdvisor.Filename = CStr(c.GetAttrib("Rte.ExperimentAdvisor.Filename"))


	Dim nPriority As Long
	'Priority for init routines
	nPriority = 3

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Init.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Init.Override")
	End If

	'Update E-Prime Priority for INIT routines
	SetOSThreadPriority nPriority

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	'Priority for start of experiment
	nPriority = -1

	'Determine if the priority should use the override value
	If c.AttribExists("SetOSThreadPriority.Override") Then
		nPriority = c.GetAttrib("SetOSThreadPriority.Override")
	End If

	'Update E-Prime Priority for start of experiment
	SetOSThreadPriority nPriority

	'Disable System power save mode
	Rte.PreventSystemIdle = True

	If CLng(c.GetAttrib("Subject")) < 0 Then
		Rte.AbortExperiment 12102, ebUCase_S & ebLCase_u & ebLCase_b & ebLCase_j & ebLCase_e & ebLCase_c & ebLCase_t & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_0 & ebDot
	End If

	If CLng(c.GetAttrib("Session")) < 1 Then
		Rte.AbortExperiment 12103, ebUCase_S & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebSpace & ebLCase_c & ebLCase_a & ebLCase_n & ebLCase_n & ebLCase_o & ebLCase_t & ebSpace & ebLCase_b & ebLCase_e & ebSpace & ebLCase_l & ebLCase_e & ebLCase_s & ebLCase_s & ebSpace & ebLCase_t & ebLCase_h & ebLCase_a & ebLCase_n & ebSpace & ebDigit_1 & ebDot
	End If

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If


	'Setup the DataFile.BaseName attribute
	c.SetAttrib "DataFile.BaseName", Replace(c.DataFile.Filename, ".txt", ebEmptyText)

	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information

	' Log E-Studio version
	c.SetAttrib "StudioVersion", "2.0.10.252"

	' Log runtime version.
	c.SetAttrib "RuntimeVersion", Rte.Version.Major & ebDot & Rte.Version.Minor & ebDot & Rte.Version.Internal & ebDot & Rte.Version.Build
	c.SetAttrib "RuntimeVersionExpected", 2 & ebDot & 0 & ebDot & 10 & ebDot & 356
	c.SetAttrib "RuntimeCapabilities", ebUCase_P & ebLCase_r & ebLCase_o & ebLCase_f & ebLCase_e & ebLCase_s & ebLCase_s & ebLCase_i & ebLCase_o & ebLCase_n & ebLCase_a & ebLCase_l

	' Log experiment version
	c.SetAttrib "ExperimentVersion", "1.0.0.306"

	' ExperimentStart
	 Rte.ExperimentStart
	' Start the running of the Experiment
	SessionProc.Run c
	' ExperimentFinish
	 Rte.ExperimentFinish

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		Dim nDataFileConvertProgress As Long
		nDataFileConvertProgress = ebProgressSimple
		If c.AttribExists("DataFile.ConvertProgress") Then nDataFileConvertProgress = CLng(c.GetAttrib("DataFile.ConvertProgress"))
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(nDataFileConvertProgress)

		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

	UnInitGlobals

	' Experiment Advisor Report Generation
	If Rte.ExperimentAdvisor.Enabled = True Then
		If Len(Rte.ExperimentAdvisor.Filename) = 0 Then Rte.ExperimentAdvisor.Filename = Replace(c.DataFile.Filename, ".txt", "-ExperimentAdvisorReport.xml")
		Rte.ExperimentAdvisor.GenerateReport


	End If


ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub
